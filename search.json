[{"title":"C/C++","url":"/2022/04/20/C-C/","content":"<p>记录c++一些基础知识和面试常考点</p>\n<span id=\"more\"></span>\n\n<h1 id=\"语言基础\"><a href=\"#语言基础\" class=\"headerlink\" title=\"语言基础\"></a>语言基础</h1><hr>\n<ul>\n<li>C++三大特性：封装、继承、多态</li>\n<li>C++可复用性高，引入了模板的概念</li>\n</ul>\n<h2 id=\"struct和class区别\"><a href=\"#struct和class区别\" class=\"headerlink\" title=\"struct和class区别\"></a>struct和class区别</h2><ol>\n<li>struct一般用于描述一个数据结构集合，class是对一个数据对象的封装</li>\n<li>struct中的默认访问控制权限是public，class中默认访问控制权限是private</li>\n<li>在继承关系中，struct默认公有继承，class默认私有继承<ul>\n<li>公有继承：公有继承时，对基类的公有成员和保护成员的访问属性不变，派生类的新增成员可以访问基类的公有成员和保护成员访问不了私有成员。派生类的对象只能访问派生类的公有成员</li>\n<li>私有继承：基类的公有成员和保护成员都被派生类继承下来变成私有成员，派生类的新增成员可以访问基类的公有成员和保护成员，访问不了积累的私有成员。派生类的对象不能访问基类的任何成员</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"c-编译过程\"><a href=\"#c-编译过程\" class=\"headerlink\" title=\"c++编译过程\"></a>c++编译过程</h2><ul>\n<li>预编译</li>\n<li>编译</li>\n<li>汇编</li>\n<li>链接</li>\n</ul>\n<h3 id=\"预编译\"><a href=\"#预编译\" class=\"headerlink\" title=\"预编译\"></a>预编译</h3><ol>\n<li>删除所有的#define，展开所有的宏定义</li>\n<li>处理所有的条件预编译指令，如#if、#ifndef</li>\n<li>处理#include预编译指令，将被包含的文件插入到预编译指令的位置</li>\n<li>过滤所有的注释</li>\n<li>添加行号和文件名标识</li>\n</ol>\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>词法分析、语法分析、语义分析、代码优化、生成目标代码（汇编代码）、目标代码优化</p>\n<h3 id=\"汇编\"><a href=\"#汇编\" class=\"headerlink\" title=\"汇编\"></a>汇编</h3><p>将汇编代码变成机器可执行的指令</p>\n<h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><p>将不同的源文件生成的目标文件进行链接，形成一个可执行的程序<br>分为<strong>静态链接</strong>和<strong>动态链接</strong></p>\n<h2 id=\"static关键字\"><a href=\"#static关键字\" class=\"headerlink\" title=\"static关键字\"></a>static关键字</h2><ul>\n<li>定义全局变量和静态变量，静态变量只能在本源文件中使用</li>\n<li>定义静态函数，静态函数只能在本源文件中使用</li>\n<li>定义类的静态成员变量</li>\n<li>定义类的静态成员函数</li>\n</ul>\n<h2 id=\"野指针\"><a href=\"#野指针\" class=\"headerlink\" title=\"野指针\"></a>野指针</h2><ul>\n<li><strong>概念</strong>：指向位置不可知的指针</li>\n<li><strong>产生原因</strong>：释放内存后指针不及时置空，依然指向了该内存，可能出现非法访问的错误</li>\n<li><strong>避免方法</strong><ul>\n<li>初始化置NULL</li>\n<li>申请内存后判空</li>\n<li>指针释放后置NULL</li>\n<li>使用智能指针</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"const和define的区别\"><a href=\"#const和define的区别\" class=\"headerlink\" title=\"const和define的区别\"></a>const和define的区别</h2><p>const定义常量；define定义宏，也可以定义常量</p>\n<ol>\n<li>const生效于编译的阶段；define生效于预处理阶段</li>\n<li>const定义的常量储存在内存中、需要额外的内存空间；define定义的常量，运行时是直接的操作数，不会存放在内存中</li>\n<li>const定义的常量带类型；define定义不带类型</li>\n</ol>\n<h2 id=\"int-const-和int-const的区别\"><a href=\"#int-const-和int-const的区别\" class=\"headerlink\" title=\"int const*和int *const的区别\"></a>int const*和int *const的区别</h2><ul>\n<li>int const* &#x2F;&#x2F;指针的指向可变，内容不可变</li>\n<li>int *const &#x2F;&#x2F;指针的指向不可变，内容可变</li>\n</ul>\n<h1 id=\"c-内存\"><a href=\"#c-内存\" class=\"headerlink\" title=\"c++内存\"></a>c++内存</h1><hr>\n<h2 id=\"堆和栈的区别\"><a href=\"#堆和栈的区别\" class=\"headerlink\" title=\"堆和栈的区别\"></a>堆和栈的区别</h2><ol>\n<li><strong>堆栈空间分配不同</strong>：栈由操作系统自动分配释放，存放函数的参数值，局部变量的值等；堆一般由程序员分配释放</li>\n<li><strong>堆栈缓存方式不同</strong>：栈使用一级缓存，通常被调用时处于存储空间，调用完毕立即释放；堆则是存放在二级缓存中，速度慢些</li>\n<li><strong>堆栈数据结构不同</strong></li>\n</ol>\n<h2 id=\"c-内存分配方式\"><a href=\"#c-内存分配方式\" class=\"headerlink\" title=\"c++内存分配方式\"></a>c++内存分配方式</h2><ol>\n<li><strong>从静态分区分配</strong>：此时的内存在程序编译时已经分配好，并在整个运行期间存在。全局变量，static变量在此存储</li>\n<li><strong>在栈区分配</strong>：相关代码被执行时创建，执行结束后自动释放</li>\n<li><strong>在堆区分配</strong>：动态分配内存，由程序员决定</li>\n</ol>\n<h2 id=\"常见内存错误\"><a href=\"#常见内存错误\" class=\"headerlink\" title=\"常见内存错误\"></a>常见内存错误</h2><ul>\n<li>内存未分配成功，却被使用。对策：使用内存前检查是否分配成功</li>\n<li>内存分配成功，未初始化就使用</li>\n<li>内存操作越界</li>\n<li>释放了内存，仍在使用。野指针</li>\n<li>未释放内存，导致内存泄露</li>\n</ul>\n<h2 id=\"内存泄露\"><a href=\"#内存泄露\" class=\"headerlink\" title=\"内存泄露\"></a>内存泄露</h2><p>申请了一块内存，使用完毕后没有释放。</p>\n<h1 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h1><hr>\n<h2 id=\"面向对象三大特征\"><a href=\"#面向对象三大特征\" class=\"headerlink\" title=\"面向对象三大特征\"></a>面向对象三大特征</h2><ol>\n<li><strong>封装</strong>：将数据和操作数据的方法有机结合，隐藏对象的属性和实现细节，使用公开接口和对象使用</li>\n<li><strong>继承</strong>：实现现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展</li>\n<li><strong>多态</strong>：用父类型别的指针指向子类的实例，通过父类的指针调用实际子类的成员函数。实现多态的两种方式：<em>重写</em>、<em>重载</em></li>\n</ol>\n<h2 id=\"重写和重载\"><a href=\"#重写和重载\" class=\"headerlink\" title=\"重写和重载\"></a>重写和重载</h2><ul>\n<li><strong>重写</strong>：是指派生类中存在被重新定义的函数。其函数名，参数列表，返回值类型，所有都必须和基类中被重写的函数一致。只有函数体不同，派生类对象调用时会调用派生类的重写函数，不会调用基类的函数。重写的基类中被重写的函数必须有virtual修饰</li>\n<li><strong>重载</strong>：同一访问区内被声明的几个具有不同参数列的同名函数，根据参数列表确定调用哪个函数，重载不关心函数返回类型</li>\n</ul>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>默认构造函数、初始化构造函数、拷贝构造函数、移动构造函数</p>\n<ul>\n<li>默认构造函数和初始化构造函数在定义类的对象时完成对象的初始化工作</li>\n<li>拷贝构造函数用于复制本类的对象</li>\n<li>移动构造函数用于将其他类型的变量隐式转换为本类对象</li>\n</ul>\n<h2 id=\"析构函数\"><a href=\"#析构函数\" class=\"headerlink\" title=\"析构函数\"></a>析构函数</h2><p>只定义了析构函数，编译器将自动为我们生成拷贝构造函数和默认构造函数</p>\n<h2 id=\"向上转型和向下转型\"><a href=\"#向上转型和向下转型\" class=\"headerlink\" title=\"向上转型和向下转型\"></a>向上转型和向下转型</h2><ul>\n<li><strong>向上转型</strong>：子类转换为父类，使用dynamic_cast<type_id>(expression)，这种转换相对来说比较安全不会有数据的丢失</li>\n<li><strong>向下转型</strong>：父类转换为子类，可以使用强制转换，不安全，会导致数据的丢失。父类的指针或引用的内存中可能不包含子类成员的内存</li>\n</ul>\n<h2 id=\"深拷贝与浅拷贝\"><a href=\"#深拷贝与浅拷贝\" class=\"headerlink\" title=\"深拷贝与浅拷贝\"></a>深拷贝与浅拷贝</h2><ul>\n<li><strong>浅拷贝</strong>：值拷贝，本质上来说源对象和目标对象共用一份实体，只是所引用的变量名不同，地址含是相同的。</li>\n<li><strong>深拷贝</strong>：拷贝的时候先开辟出和源对象大小一样的空间，然后将源对象的内容拷贝到目标对象中去。</li>\n</ul>\n<h1 id=\"c-11新特性\"><a href=\"#c-11新特性\" class=\"headerlink\" title=\"c++11新特性\"></a>c++11新特性</h1><hr>\n<h2 id=\"智能指针\"><a href=\"#智能指针\" class=\"headerlink\" title=\"智能指针\"></a>智能指针</h2><ul>\n<li>auto_ptr</li>\n<li>unique_ptr</li>\n<li>shared_ptr</li>\n<li>wear_ptr</li>\n</ul>\n","categories":["CS-Notes","C++"],"tags":["C++"]},{"title":"LeetCode 146.LRU缓存","url":"/2022/04/14/LeetCode146-LRU%E7%BC%93%E5%AD%98/","content":"<p><a href=\"https://leetcode-cn.com/problems/lru-cache\">传送门</a></p>\n<p>设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。<br>实现 LRUCache 类：</p>\n<ul>\n<li>LRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存</li>\n<li>int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。</li>\n<li>void put(int key, int value)如果关键字key 已经存在，则变更其数据值value ；如果不存在，则向缓存中插入该组key-value 。如果插入操作导致关键字数量超过capacity ，则应该 逐出 最久未使用的关键字。</li>\n</ul>\n<p>函数 get 和 put 必须以 O(1) 的平均时间复杂度运行。</p>\n<span id=\"more\"></span>\n\n<hr>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LRUCache</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">LRUCache</span>(<span class=\"type\">int</span> capacity) &#123;</span><br><span class=\"line\">        q.size = capacity;</span><br><span class=\"line\">        f.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f.<span class=\"built_in\">count</span>(key)) &#123;</span><br><span class=\"line\">            CacheNode *node = f[key];</span><br><span class=\"line\">            q.<span class=\"built_in\">remove</span>(node);</span><br><span class=\"line\">            q.<span class=\"built_in\">push_front</span>(node);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node-&gt;val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">put</span><span class=\"params\">(<span class=\"type\">int</span> key, <span class=\"type\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f.<span class=\"built_in\">count</span>(key)) &#123;</span><br><span class=\"line\">            CacheNode *node = f[key];</span><br><span class=\"line\">            node-&gt;val = value;</span><br><span class=\"line\">            q.<span class=\"built_in\">remove</span>(node);</span><br><span class=\"line\">            q.<span class=\"built_in\">push_front</span>(node);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            CacheNode *node = <span class=\"keyword\">new</span> <span class=\"built_in\">CacheNode</span>(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (q.size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                q.<span class=\"built_in\">push_front</span>(node);</span><br><span class=\"line\">                f.<span class=\"built_in\">erase</span>(q.tail-&gt;prev-&gt;key);</span><br><span class=\"line\">                q.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">                f[key] = node;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                q.<span class=\"built_in\">push_front</span>(node);</span><br><span class=\"line\">                --q.size;</span><br><span class=\"line\">                f[key] = node;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">CacheNode</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> key, val;</span><br><span class=\"line\">        CacheNode *prev;</span><br><span class=\"line\">        CacheNode *next;</span><br><span class=\"line\">        <span class=\"built_in\">CacheNode</span>() &#123;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">CacheNode</span>(<span class=\"type\">int</span> key, <span class=\"type\">int</span> val):<span class=\"built_in\">key</span>(key), <span class=\"built_in\">val</span>(val), <span class=\"built_in\">prev</span>(<span class=\"literal\">NULL</span>), <span class=\"built_in\">next</span>(<span class=\"literal\">NULL</span>) &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">CacheList</span> &#123;</span><br><span class=\"line\">        CacheNode *head = <span class=\"keyword\">new</span> <span class=\"built_in\">CacheNode</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        CacheNode *tail = <span class=\"keyword\">new</span> <span class=\"built_in\">CacheNode</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> size;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">CacheList</span>() &#123;</span><br><span class=\"line\">            head-&gt;next = tail;</span><br><span class=\"line\">            tail-&gt;prev = head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_front</span><span class=\"params\">(CacheNode *node)</span> </span>&#123;</span><br><span class=\"line\">            node-&gt;prev = head;</span><br><span class=\"line\">            node-&gt;next = head-&gt;next;</span><br><span class=\"line\">            head-&gt;next-&gt;prev = node;</span><br><span class=\"line\">            head-&gt;next = node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(CacheNode *node)</span> </span>&#123;</span><br><span class=\"line\">            node-&gt;prev-&gt;next = node-&gt;next;</span><br><span class=\"line\">            node-&gt;next-&gt;prev = node-&gt;prev;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop_back</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            CacheNode *node = tail-&gt;prev;</span><br><span class=\"line\">            <span class=\"built_in\">remove</span>(node);</span><br><span class=\"line\">            <span class=\"built_in\">delete</span>(node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    CacheList q&#123;&#125;;</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>, CacheNode*&gt; f;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * LRUCache* obj = new LRUCache(capacity);</span></span><br><span class=\"line\"><span class=\"comment\"> * int param_1 = obj-&gt;get(key);</span></span><br><span class=\"line\"><span class=\"comment\"> * obj-&gt;put(key,value);</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>","categories":["leetcode"],"tags":["leetcode","题解"]},{"title":"Hello World","url":"/2022/10/10/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"分布式","url":"/2022/10/10/%E5%88%86%E5%B8%83%E5%BC%8F/","content":"<p>嗨嗨嗨</p>\n<span id=\"more\"></span>\n\n<h1 id=\"一、大型网站系统的特点\"><a href=\"#一、大型网站系统的特点\" class=\"headerlink\" title=\"一、大型网站系统的特点\"></a>一、大型网站系统的特点</h1><h2 id=\"高并发，大流量\"><a href=\"#高并发，大流量\" class=\"headerlink\" title=\"高并发，大流量\"></a>高并发，大流量</h2><p>需要面对高并发用户，大流量访问。<br>Google日均PV35亿，日IP访问数3亿；腾讯QQ的最大在线用户数1.4亿（2011年数据）。</p>\n<h2 id=\"高可用\"><a href=\"#高可用\" class=\"headerlink\" title=\"高可用\"></a>高可用</h2><p>系统7×24小时不间断服务。</p>\n<h2 id=\"海量数据\"><a href=\"#海量数据\" class=\"headerlink\" title=\"海量数据\"></a>海量数据</h2><p>需要存储、管理海量数据，需要使用大量服务器。Facebook每周上传的照片数量接近10亿，百度收录的网页数目有数百亿，Google有近百万台服务器为全球用户提供服务。</p>\n<h2 id=\"用户分布广泛，网络情况复杂\"><a href=\"#用户分布广泛，网络情况复杂\" class=\"headerlink\" title=\"用户分布广泛，网络情况复杂\"></a>用户分布广泛，网络情况复杂</h2><p>许多大型互联网网站都是为全球用户提供服务的，用户分布范围广，各地网络情况千差万别。在国内，还有各个运营商网络互通难的问题。</p>\n<h2 id=\"安全环境恶劣\"><a href=\"#安全环境恶劣\" class=\"headerlink\" title=\"安全环境恶劣\"></a>安全环境恶劣</h2><p>由于互联网的开放性，使得互联网网站更容易受到攻击，大型网站几乎每天都会被黑客攻击。</p>\n<h2 id=\"需求快速变更，发布频繁\"><a href=\"#需求快速变更，发布频繁\" class=\"headerlink\" title=\"需求快速变更，发布频繁\"></a>需求快速变更，发布频繁</h2><p>和传统软件版本发布频率不同，互联网产品为快速适应市场，满足用户需求，其产品发布频率极高。一般大型网站的产品每周都有新版本发布上线，中小型网站的发布更频繁，有时候一天会发布几十次。</p>\n<h2 id=\"渐进式发展\"><a href=\"#渐进式发展\" class=\"headerlink\" title=\"渐进式发展\"></a>渐进式发展</h2><p>几乎所有的大型互联网网站都是从一个小网站开始，渐进的发展起来的。Facebook是扎克伯格同学在哈佛大学的宿舍里开发的；Google的第一台服务器部署在斯坦福大学的实验室；阿里巴巴是在马云家的客厅诞生的。好的互联网产品都是慢慢运营出来的，不是一开始就开发好的，这也正好与网站架构的发展演化过程对应。</p>\n<h1 id=\"二、大型网站架构演化发展历程\"><a href=\"#二、大型网站架构演化发展历程\" class=\"headerlink\" title=\"二、大型网站架构演化发展历程\"></a>二、大型网站架构演化发展历程</h1><p>大型网站的技术挑战主要来自于庞大的用户，高并发的访问和海量的数据，任何简单的业务一旦需要处理数以P计的数据和面对数以亿计的用户，问题就会变得很棘手。大型网站架构主要解决这类问题。</p>\n<h2 id=\"初始阶段的网站架构\"><a href=\"#初始阶段的网站架构\" class=\"headerlink\" title=\"初始阶段的网站架构\"></a>初始阶段的网站架构</h2><p>大型网站都是从小型网站发展而来，网站架构也是一样，是从小型网站架构逐步演化而来。小型网站最开始没有太多人访问，只需要一台服务器就绰绰有余，这时的网站架构如下图所示:</p>\n<pre class=\"mermaid\">graph LR\nsubgraph One[应用服务器]\nA[应用程序]-->B[文件]\nA-->C[数据库]\nend</pre>\n<p>应用程序、数据库、文件等所有资源都在一台服务器上。</p>\n<h2 id=\"应用服务和数据服务分离\"><a href=\"#应用服务和数据服务分离\" class=\"headerlink\" title=\"应用服务和数据服务分离\"></a>应用服务和数据服务分离</h2><p>随着网站业务的发展，一台服务器逐渐不能满足需求：越来越多的用户访问导致性能越来越差，越来越多的数据导致存储空间不足。这时就需要将应用和数据分离。应用和数据分离后整个网站使用3台服务器：应用服务器、文件服务器和数据库服务器。这3台服务器对硬件资源的要求各不相同：</p>\n<blockquote>\n<p>应用服务器需要处理大量的业务逻辑，因此需要更快更强大的CPU；</p>\n</blockquote>\n<blockquote>\n<p>数据库服务器需要快速磁盘检索和数据缓存，因此需要更快的磁盘和更大的内存；</p>\n</blockquote>\n<blockquote>\n<p>文件服务器需要存储大量用户上传的文件，因此需要更大的硬盘。</p>\n</blockquote>\n<p>此时，网站系统的架构如下图所示：</p>\n<pre class=\"mermaid\">flowchart LR\nsubgraph One[应用服务器]\nA(应用程序)\nend\nsubgraph Two[文件服务器]\nB(文件)\nend\nsubgraph Three[数据库服务器]\nC(数据库)\nend\nOne-->Two\nOne-->Three</pre>\n<p>应用和数据分离后，不同特性的服务器承担不同的服务角色，网站的并发处理能力和数据存储空间得到了很大改善，支持网站业务进一步发展。但是随着用户逐渐增多，网站又一次面临挑战：数据库压力太大导致访问延迟，进而影响整个网站的性能，用户体验受到影响。这时需要对网站架构进一步优化。</p>\n<h2 id=\"使用缓存改善网站性能\"><a href=\"#使用缓存改善网站性能\" class=\"headerlink\" title=\"使用缓存改善网站性能\"></a>使用缓存改善网站性能</h2><p>网站访问的特点和现实世界的财富分配一样遵循二八定律：80%的业务访问集中在20%的数据上。既然大部分业务访问集中在一小部分数据上，那么如果把这一小部分数据缓存在内存上，就可以减少数据库的访问压力，提高整个网站的数据访问速度，改善数据库的访问性能了。网站使用的缓存可以分为两种：缓存在应用服务器上的本地缓存和缓存在专门的分布式缓存服务器上的远程缓存。</p>\n<blockquote>\n<p>本地缓存的访问速度更快一些，但是受应用服务器内存限制，其缓存数据量有限，而且会出现和应用程序争用内存的情况。远程分布式缓存可以使用集群的方式，部署大内存的服务器作为专门的缓存服务器，可以在理论上做到不受内存容量限制的缓存服务。</p>\n</blockquote>\n<pre class=\"mermaid\">flowchart LR;\nsubgraph One[应用服务器]\nA(应用程序)-->B(本地缓存)\nend\nsubgraph Two[分布式缓存服务器...]\nC(远程分布式缓存)\nend\nsubgraph Three[文件服务器]\nD(文件)\nend\nsubgraph Four[数据库服务器]\nE(数据库)\nend\nA-->Two\nA-->Three\nA-->Four</pre>\n<p>使用缓存后，数据访问压力得到有效缓解，但是单一应用服务器能够处理的请求连接有限，在网站访问高峰期，应用服务器成为整个网站的瓶颈。</p>\n<h2 id=\"使用应用服务器集群改善网站的并发处理能力\"><a href=\"#使用应用服务器集群改善网站的并发处理能力\" class=\"headerlink\" title=\"使用应用服务器集群改善网站的并发处理能力\"></a>使用应用服务器集群改善网站的并发处理能力</h2><p>使用集群是网站解决高并发、海量数据问题的常用手段。当一台服务器的处理能力、存储空间不足时，不要企图去更换更强大的服务器，对大型网站而言，不管多么强大的服务器，都满足不了网站持续增长的业务需求。这种情况下，更恰当的做法是增加一台服务器分担原有服务器的访问及存储压力。<strong>对网站架构而言，只要能通过增加一台服务器的方式改善负载压力，就可以以同样的方式持续增加服务器不断改善系统性能，从而实现系统的可伸缩性。</strong>应用服务器实现集群是网站可伸缩架构设计中较为简单成熟的一种，如下图所示：</p>\n<pre class=\"mermaid\">flowchart LR;\nA(负载均衡调度服务器)\nsubgraph One[应用服务器集群]\nB(应用程序)-->C(本地缓存)\nend\nsubgraph Two[分布式缓存服务器集群]\nD(远程分布式缓存)\nend\nsubgraph Three[文件服务器集群]\nE(文件)\nend\nsubgraph Four[数据库服务器]\nF(数据库)\nend\nA-->One\nB-->Two\nB-->Three\nB-->Four</pre>\n<p>通过负载均衡调度服务器，可以将来自用户浏览器的访问请求分发到应用服务器集群中的任何一台服务器上，如果有更多用户，就在集群中加入更多的应用服务器，使应用服务器的压力不再成为整个网站的瓶颈。</p>\n","categories":["面试宝典"],"tags":["面试宝典"]},{"title":"字节暑期实习面经","url":"/2022/05/17/%E5%AD%97%E8%8A%82%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/","content":"<p>记录暑期实习字节跳动的面试经历</p>\n<span id=\"more\"></span>\n\n<h1 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h1><p>一面时间比较长了，有些问题不记得了</p>\n<ul>\n<li>自我介绍</li>\n<li>list和数组的区别</li>\n<li>list的查询、插入、删除的时间复杂度</li>\n<li>http的方法</li>\n<li>http状态码401、404</li>\n<li>c++什么是虚函数</li>\n<li>算法：合并两个有序数组</li>\n</ul>\n<h1 id=\"二面\"><a href=\"#二面\" class=\"headerlink\" title=\"二面\"></a>二面</h1><ul>\n<li>项目经验无</li>\n<li>算法：k个有序数组，找到有序数组中第m小的数</li>\n<li>http的请求过程</li>\n<li>http1.0、1.1、2.0区别</li>\n<li>c++什么情况下出现内存泄漏</li>\n<li>避免内存泄露的开发原则、设计模式</li>\n<li>网络I&#x2F;O模型</li>\n<li>内存池</li>\n<li>算法：数组的最大区间和</li>\n</ul>\n<h1 id=\"三面\"><a href=\"#三面\" class=\"headerlink\" title=\"三面\"></a>三面</h1><ul>\n<li>http协议</li>\n<li>http包的拆分</li>\n<li>http有哪些方法</li>\n<li>get和post的区别</li>\n<li>cookie和session</li>\n<li>cookie的存放位置</li>\n<li>cookie每次http请求都会发送吗</li>\n<li>算法1：爬楼梯（每次1，2，3步），一句话（一行代码）完成</li>\n<li>算法2：找到链表中环的入口节点（推导这个算法，证明正确性）</li>\n<li>数据库索引，b+树，b树，红黑树，为什么用b+树</li>\n</ul>\n","categories":["面经"],"tags":["面经","暑期实习"]},{"title":"操作系统","url":"/2022/04/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","content":"<p><img src=\"http://fwnhub.cn:8888/Chevereto/images/2022/04/05/wallhaven-1j6rzv_1920x1080.png\"></p>\n<span id=\"more\"></span>\n<hr>\n<h1 id=\"进程的描述与控制\"><a href=\"#进程的描述与控制\" class=\"headerlink\" title=\"进程的描述与控制\"></a>进程的描述与控制</h1><h2 id=\"内核态与用户态\"><a href=\"#内核态与用户态\" class=\"headerlink\" title=\"内核态与用户态\"></a>内核态与用户态</h2><p><strong>什么时候进入内核态</strong>：系统调用、异常、中断</p>\n<h2 id=\"为什么要有线程\"><a href=\"#为什么要有线程\" class=\"headerlink\" title=\"为什么要有线程\"></a>为什么要有线程</h2><p>在不引入线程概念的操作系统中，进程是资源分配和独立调度的单位。进程的创建、撤销和切换需要较大的时空开销，因此系统中进程的数量和进程切换的频率受到限制，影响系统并发性的提高。引入线程作为独立调度和分派的单位，不独立占有资源，而是与其他线程共享统一进程的资源，减小了系统的时空开销</p>\n<h2 id=\"进程和线程的区别\"><a href=\"#进程和线程的区别\" class=\"headerlink\" title=\"进程和线程的区别\"></a>进程和线程的区别</h2><ol>\n<li>进程是资源分配的基本单位，线程是独立调度的基本单位</li>\n<li>地址空间资源：不同进程的地址空间是相互独立的；同一进程的不同线程共享同一地址空间</li>\n<li>通信：进程的通信需要使用操作系统提供的进程间通信机制；同一进程的不同线程可以通过读写全部变量通信</li>\n<li>系统开销：创建和撤销进程时，需要系统为之分配和回收资源，操作系统付出的开销远大于创建和撤销线程时的开销。进程切换时，涉及到整个当前进程的CPU环境的保存的新的CPU环境的设置；切换线程时，只需保存和设置少量寄存器的内容，开销很小</li>\n</ol>\n<h2 id=\"孤儿进程\"><a href=\"#孤儿进程\" class=\"headerlink\" title=\"孤儿进程\"></a>孤儿进程</h2><p>一个父进程退出后，它的一个或多个子进程还在运行，那么这些子进程将成为孤儿进程，孤儿进程将被init进程收养</p>\n<h2 id=\"进程中断的过程\"><a href=\"#进程中断的过程\" class=\"headerlink\" title=\"进程中断的过程\"></a>进程中断的过程</h2><ol>\n<li>保护现场，保护中断处理器的现场信息</li>\n<li>修改中断进程的进程控制块信息，如进程状态等</li>\n<li>把被中断的进程的进程控制块加入有关的队列</li>\n<li>选择下一个占有处理器运行的进程</li>\n<li>根据被选中进程设置操作系统用到的地址转换和存储保护信息</li>\n<li>根据被选中进程恢复处理器现场</li>\n</ol>\n<hr>\n<h1 id=\"进程同步\"><a href=\"#进程同步\" class=\"headerlink\" title=\"进程同步\"></a>进程同步</h1><h2 id=\"进程间的通信方式\"><a href=\"#进程间的通信方式\" class=\"headerlink\" title=\"进程间的通信方式\"></a>进程间的通信方式</h2><ul>\n<li>管道</li>\n<li>信号量</li>\n<li>消息缓冲队列</li>\n<li>套接字socket</li>\n</ul>\n<h3 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道\"></a>管道</h3><p>操作系统在内核中开辟一块缓冲区用于通信。管道时一种两个进程间单向通信的机制。</p>\n<hr>\n<h1 id=\"进程调度\"><a href=\"#进程调度\" class=\"headerlink\" title=\"进程调度\"></a>进程调度</h1><h2 id=\"进程调度算法\"><a href=\"#进程调度算法\" class=\"headerlink\" title=\"进程调度算法\"></a>进程调度算法</h2><ul>\n<li>先来先服务算法</li>\n<li>短进程优先算法</li>\n<li>优先权算法</li>\n<li>时间片轮转算法</li>\n<li>多级队列算法</li>\n<li>多级反馈队列算法</li>\n</ul>\n<h3 id=\"时间片轮转算法\"><a href=\"#时间片轮转算法\" class=\"headerlink\" title=\"时间片轮转算法\"></a>时间片轮转算法</h3><p><strong>时间片过长或过短的影响</strong></p>\n<ul>\n<li>若时间片太长，则多数进程可以在一个时间片内处理完，能够缩短进程的周转时间，但是交互用户的响应时间会比较长</li>\n<li>若时间片太短，则一个进程要经过多次调度运行才能执行完，进程切换和进程调度的开销会增加，系统的平均周转时间也会比较长</li>\n</ul>\n<hr>\n<h1 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h1><p>多个进程竞争共享资源而引起的进程不能向前推进的僵死状态叫做死锁</p>\n<h2 id=\"产生死锁的原因\"><a href=\"#产生死锁的原因\" class=\"headerlink\" title=\"产生死锁的原因\"></a>产生死锁的原因</h2><ol>\n<li>竞争共享资源</li>\n<li>进程推进顺序不当</li>\n</ol>\n<h2 id=\"产生死锁的条件\"><a href=\"#产生死锁的条件\" class=\"headerlink\" title=\"产生死锁的条件\"></a>产生死锁的条件</h2><ul>\n<li>互斥条件</li>\n<li>请求和保持条件</li>\n<li>不剥夺条件</li>\n<li>环路等待条件</li>\n</ul>\n<h2 id=\"处理死锁的基本方法\"><a href=\"#处理死锁的基本方法\" class=\"headerlink\" title=\"处理死锁的基本方法\"></a>处理死锁的基本方法</h2><ul>\n<li>预防死锁</li>\n<li>避免死锁</li>\n<li>检测并解除死锁</li>\n<li>忽略死锁，认为死锁不可能在系统内发生</li>\n</ul>\n<h3 id=\"死锁的预防\"><a href=\"#死锁的预防\" class=\"headerlink\" title=\"死锁的预防\"></a>死锁的预防</h3><ol>\n<li><strong>摒弃请求和保持条件</strong>：系统要求所有进程在执行前要一次性地申请整个运行过程中所需要的全部资源</li>\n<li><strong>摒弃不剥夺条件</strong>：一个已保持了某些资源的进程，当它再提出新的资源要求而不能立即得到满足时，必须释放它已经保持的所有资源</li>\n<li><strong>摒弃环路等待条件</strong>：规定进程必须按一定的顺序申请资源。对所有不同类型的资源排序，要求每个进程按递增顺序申请资源</li>\n</ol>\n<h3 id=\"死锁的避免\"><a href=\"#死锁的避免\" class=\"headerlink\" title=\"死锁的避免\"></a>死锁的避免</h3><p>只要资源分配使系统资源分配处于安全状态，死锁就不会发生<br><strong>安全状态</strong>：系统能找到一个进程执行序列，使系统只要按此序列为每个进程分配资源，就可以保证进程的资源分配和执行顺利完成，不会发生死锁时，称系统处于安全状态</p>\n<h4 id=\"银行家算法\"><a href=\"#银行家算法\" class=\"headerlink\" title=\"银行家算法\"></a>银行家算法</h4><center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    src=\"http://fwnhub.cn:8888/Chevereto/images/2022/04/05/IMG_016720220405-162120.jpg\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">银行家算法流程图</div>\n</center>\n\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    src=\"http://fwnhub.cn:8888/Chevereto/images/2022/04/05/IMG_016820220405-162804.jpg\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">安全性检测算法流程图</div>\n</center>\n\n<h3 id=\"死锁的检测和解除\"><a href=\"#死锁的检测和解除\" class=\"headerlink\" title=\"死锁的检测和解除\"></a>死锁的检测和解除</h3><h4 id=\"资源分配图\"><a href=\"#资源分配图\" class=\"headerlink\" title=\"资源分配图\"></a>资源分配图</h4><center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    src=\"http://fwnhub.cn:8888/Chevereto/images/2022/04/06/IMG_016920220406-151129.jpg\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">资源分配图示例</div>\n</center>\n用圆圈代表一个进程，方框代表一类资源。请求边有进程指向方框中的r<sub>j</sub>，分配边应始于方框中的一个小圆圈\n\n<h4 id=\"死锁定理\"><a href=\"#死锁定理\" class=\"headerlink\" title=\"死锁定理\"></a>死锁定理</h4><p>S为死锁状态的充分条件是当且仅当S状态的资源分配图是不可能完全简化的</p>\n<center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    src=\"http://fwnhub.cn:8888/Chevereto/images/2022/04/06/IMG_017020220406-152046.jpg\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">资源分配图的简化</div>\n</center>\n\n<ol>\n<li>找到一个既不阻塞又非独立的进程节点p<sub>i</sub>（即找出一条有向边与它相连，且该有向边对应资源的申请数量小于等于系统中已有空闲资源数量），消去它的请求边和分配边，使之成为孤立的节点</li>\n<li>进程p<sub>i</sub>所释放的资源，可以唤醒某些因等待这些资源而阻塞的进程，原来的阻塞进程可以变为非阻塞进程。根据1中的方法进行一系列简化后，若能消去图中所有的边，则称该图是可完全简化的</li>\n</ol>\n<h4 id=\"死锁的解除\"><a href=\"#死锁的解除\" class=\"headerlink\" title=\"死锁的解除\"></a>死锁的解除</h4><ul>\n<li>进程终止</li>\n<li>资源抢占</li>\n<li>回滚<br><strong>饥饿</strong>：进程因长时间不能获得所需资源而处于无限等待的状态</li>\n</ul>\n<hr>\n<h1 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h1><ul>\n<li>实现内存分配、内存回收等基本内存管理功能</li>\n<li>提高空间的利用率和内存的访问速度<br><strong>局部性原理</strong>：时间局部性、空间局部性</li>\n</ul>\n<h2 id=\"程序的装入和链接\"><a href=\"#程序的装入和链接\" class=\"headerlink\" title=\"程序的装入和链接\"></a>程序的装入和链接</h2><p>绝大多数情况下，源程序需要经过编译、链接、装入几个阶段才能执行</p>\n<h3 id=\"程序的装入\"><a href=\"#程序的装入\" class=\"headerlink\" title=\"程序的装入\"></a>程序的装入</h3><ul>\n<li><strong>绝对装入方式</strong>：事先已知程序在内存中的驻留位置</li>\n<li><strong>可重定位装入方式（静态重定位）</strong></li>\n<li><strong>动态运行时装入方式（动态重定位）</strong>：地址映射必须延迟到进程执行时在进行</li>\n</ul>\n<h3 id=\"程序的链接\"><a href=\"#程序的链接\" class=\"headerlink\" title=\"程序的链接\"></a>程序的链接</h3><p>将编译后的目标模块装配成一个可执行的程序</p>\n<h4 id=\"静态链接\"><a href=\"#静态链接\" class=\"headerlink\" title=\"静态链接\"></a>静态链接</h4><p>将目标模块链接成一个完整的装入模块</p>\n<ul>\n<li><strong>优点</strong>：静态链接程序运行的速度较快</li>\n<li><strong>缺点</strong>：<ul>\n<li>可执行目标比较大，占用的内、外存空间较大，使存储开销大</li>\n<li>使程序开发不够灵活方便，修改某一个模块会导致整个程序的重新链接</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"动态链接\"><a href=\"#动态链接\" class=\"headerlink\" title=\"动态链接\"></a>动态链接</h4><p>目标模块的链接推迟到执行时再进行</p>\n<ul>\n<li>节省内存和外存空间</li>\n<li>方便程序开发</li>\n<li>程序运行时速度变慢</li>\n</ul>\n<h2 id=\"连续分配存储管理方式\"><a href=\"#连续分配存储管理方式\" class=\"headerlink\" title=\"连续分配存储管理方式\"></a>连续分配存储管理方式</h2><p>连续分配是指操作系统分配内存时，为每个进程分配一块物理地址连续的内存空间</p>\n<h3 id=\"单一连续分配\"><a href=\"#单一连续分配\" class=\"headerlink\" title=\"单一连续分配\"></a>单一连续分配</h3><p>适用于单用户单任务的OS</p>\n<h3 id=\"固定分区分配\"><a href=\"#固定分区分配\" class=\"headerlink\" title=\"固定分区分配\"></a>固定分区分配</h3><p>将用户内存空间划分为若干个固定大小的区域，在每个用户分区中可以装入一道作业<br><strong>数据结构</strong>：固定分区使用表</p>\n<h3 id=\"动态分区分配\"><a href=\"#动态分区分配\" class=\"headerlink\" title=\"动态分区分配\"></a>动态分区分配</h3><p>根据进程的实际需要为进程分配大小合适的内存区域，系统中用户分区的数量和大小都是动态变化的</p>\n<h4 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h4><p>空闲分区表、<strong>空闲分区链</strong></p>\n<h4 id=\"动态分区分配的算法\"><a href=\"#动态分区分配的算法\" class=\"headerlink\" title=\"动态分区分配的算法\"></a>动态分区分配的算法</h4><ul>\n<li>首次适应算法FF</li>\n<li>循环首次适应算法NF</li>\n<li>最佳适应算法BF</li>\n<li>最差适应算法WF</li>\n</ul>\n<h4 id=\"内存分配流程图\"><a href=\"#内存分配流程图\" class=\"headerlink\" title=\"内存分配流程图\"></a>内存分配流程图</h4><center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    src=\"http://fwnhub.cn:8888/Chevereto/images/2022/04/07/IMG_017120220407-161026.jpg\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">内存分配流程图</div>\n</center>\n\n<h4 id=\"内存回收流程\"><a href=\"#内存回收流程\" class=\"headerlink\" title=\"内存回收流程\"></a>内存回收流程</h4><ol>\n<li>释放一块连续的内存区域</li>\n<li>如果被释放区域与其他空闲分区相邻，则合并空闲分区，否则为该回收区建立一个空闲分区链表的节点</li>\n<li>修改空闲分区链表</li>\n</ol>\n<h3 id=\"紧凑\"><a href=\"#紧凑\" class=\"headerlink\" title=\"紧凑\"></a>紧凑</h3><h2 id=\"离散分配存储方式\"><a href=\"#离散分配存储方式\" class=\"headerlink\" title=\"离散分配存储方式\"></a>离散分配存储方式</h2><h3 id=\"分页式存储\"><a href=\"#分页式存储\" class=\"headerlink\" title=\"分页式存储\"></a>分页式存储</h3><h4 id=\"LRU算法\"><a href=\"#LRU算法\" class=\"headerlink\" title=\"LRU算法\"></a>LRU算法</h4><p>最近最久未使用算法<br>实现方式：<a href=\"/2022/04/14/LeetCode146-LRU%E7%BC%93%E5%AD%98/#more\">双向链表和hashmap</a></p>\n<h2 id=\"虚拟内存\"><a href=\"#虚拟内存\" class=\"headerlink\" title=\"虚拟内存\"></a>虚拟内存</h2><p>操作系统为每一个进程分配一个独立的地址空间。虚拟内存与物理内存之间存在映射关系，通过页表寻址完成虚拟地址和物理地址的转换</p>\n<h3 id=\"使用虚拟内存的优点\"><a href=\"#使用虚拟内存的优点\" class=\"headerlink\" title=\"使用虚拟内存的优点\"></a>使用虚拟内存的优点</h3><ul>\n<li>扩大地址空间</li>\n<li>内存保护：防止不同进程对物理内存的争夺和践踏，可以对特定内存地址提供写保护，防止恶意修改</li>\n<li>可以实现内存共享，方便进程通信</li>\n<li>可以避免内存碎片，虽然物理内存可能不连续，但映射到虚拟内存上连续</li>\n</ul>\n<h3 id=\"使用虚拟内存的缺点\"><a href=\"#使用虚拟内存的缺点\" class=\"headerlink\" title=\"使用虚拟内存的缺点\"></a>使用虚拟内存的缺点</h3><ul>\n<li>需要额外构建数据结构，占用空间</li>\n<li>虚拟地址到物理地址的转换，增加了执行时间</li>\n<li>页面换入换出耗时</li>\n<li>一页如果只有一部分数据，浪费内存</li>\n</ul>\n<h2 id=\"堆栈溢出\"><a href=\"#堆栈溢出\" class=\"headerlink\" title=\"堆栈溢出\"></a>堆栈溢出</h2><p>堆栈溢出就是不够堆栈中分配的局部数据块大小，向该数据块写入了过多的数据，导致数组越界。常指调用堆栈溢出，本质上一种数据结构的满溢情况</p>\n<ul>\n<li><strong>堆溢出</strong>: 不断地new一个对象，一直创建新的对象，而不进行释放，最终导致内存不足</li>\n<li><strong>栈溢出</strong>: 一次函数调用中，栈中将被依次压入：参数，返回地址等，而方法如果递归比较深或进去死循环，就会导致栈溢出</li>\n</ul>\n<hr>\n<h1 id=\"文件系统\"><a href=\"#文件系统\" class=\"headerlink\" title=\"文件系统\"></a>文件系统</h1><h2 id=\"软链接和硬链接的区别\"><a href=\"#软链接和硬链接的区别\" class=\"headerlink\" title=\"软链接和硬链接的区别\"></a>软链接和硬链接的区别</h2><ol>\n<li><strong>定义不同</strong><ul>\n<li>软链接又叫符号链接，这个文件包含了另一个文件的路径名。可以是任意文件或目录，可以链接不同文件系统的文件</li>\n<li>硬链接就是一个文件的一个或多个文件名。把文件名和计算机文件系统使用的节点号链接起来。因此我们可以用多个文件名与同一个文件进行链接，这些文件名可以在同一个目录或不同目录</li>\n</ul>\n</li>\n<li><strong>限制不同</strong><ul>\n<li>硬链接只能对已存在的文件进行创建，不能交叉文件系统进行硬链接的创建</li>\n<li>软链接可对不存在的文件或目录创建软链接；可交叉文件系统</li>\n</ul>\n</li>\n<li><strong>创建方式不同</strong><ul>\n<li>硬链接不能对目录进行创建，只可对文件创建</li>\n<li>软链接可对文件或目录创建</li>\n</ul>\n</li>\n<li><strong>影响不同</strong><ul>\n<li>删除一个硬链接文件并不影响其他有相同inode号的文件</li>\n<li>删除软连接并不影响被指向的文件，但若被指向的原文件被删除，则相关软链接被称为死链接（若被指向的文件被重新创建，死链接可恢复为正常的软链接）</li>\n</ul>\n</li>\n</ol>\n","categories":["CS-Notes","操作系统"],"tags":["操作系统"]},{"title":"数据库","url":"/2022/04/01/%E6%95%B0%E6%8D%AE%E5%BA%93/","content":"<p><img src=\"http://fwnhub.cn:8888/Chevereto/images/2022/04/05/wallhaven-zmljpw_1920x1080.png\"></p>\n<span id=\"more\"></span>\n<hr>\n<h1 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h1><h2 id=\"ACID\"><a href=\"#ACID\" class=\"headerlink\" title=\"ACID\"></a>ACID</h2><ul>\n<li><strong>原子性</strong>：事务被视为不可分割的最小单元，事物的全部操作要么全部提交，要么全部失败</li>\n<li><strong>一致性</strong>：数据库在事务执行的前后都保持一致状态。在一致状态下，不同事务对同一个数据的读取结果是相同的</li>\n<li><strong>隔离性</strong>：一个事务所做的修改在提交前，对其它事务是不可见的</li>\n<li><strong>持续性</strong>：事务对数据库的修改是永久的</li>\n</ul>\n<h1 id=\"并发一致性问题\"><a href=\"#并发一致性问题\" class=\"headerlink\" title=\"并发一致性问题\"></a>并发一致性问题</h1><ul>\n<li>丢失修改</li>\n<li>脏读</li>\n<li>不可重复读</li>\n<li>幻读</li>\n</ul>\n<h1 id=\"封锁粒度\"><a href=\"#封锁粒度\" class=\"headerlink\" title=\"封锁粒度\"></a>封锁粒度</h1><p>表级、行级</p>\n<ul>\n<li>互斥锁（X锁，写锁）</li>\n<li>共享锁（S锁，读锁）</li>\n</ul>\n<h2 id=\"兼容关系\"><a href=\"#兼容关系\" class=\"headerlink\" title=\"兼容关系\"></a>兼容关系</h2><table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">X</th>\n<th align=\"left\">S</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">X</td>\n<td align=\"left\">N</td>\n<td align=\"left\">N</td>\n</tr>\n<tr>\n<td align=\"left\">S</td>\n<td align=\"left\">N</td>\n<td align=\"left\">Y</td>\n</tr>\n</tbody></table>\n<h2 id=\"三级封锁协议\"><a href=\"#三级封锁协议\" class=\"headerlink\" title=\"三级封锁协议\"></a>三级封锁协议</h2><ul>\n<li><strong>一级封锁协议</strong>：事务在修改数据前需要加X锁，事务结束后释放<ul>\n<li>可以解决丢失修改的问题</li>\n</ul>\n</li>\n<li><strong>二级封锁协议</strong>：在一级封锁协议的基础上，数据在读取数据时要为其加S锁，读取完之后释放<ul>\n<li>可以解决脏读问题</li>\n</ul>\n</li>\n<li><strong>三级封锁协议</strong>：在二级封锁协议的基础上，事务在读取数据前要为其添加S锁，事务完成后释放S锁<ul>\n<li>可以解决不可重复读问题</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"两端锁协议\"><a href=\"#两端锁协议\" class=\"headerlink\" title=\"两端锁协议\"></a>两端锁协议</h2><p>事务的加锁和解锁分两个阶段进行</p>\n<h1 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h1><p>隔离级别能够解决的问题</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">脏读</th>\n<th align=\"left\">不可重复读</th>\n<th align=\"left\">幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">未提交读</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n</tr>\n<tr>\n<td align=\"left\">读提交</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n</tr>\n<tr>\n<td align=\"left\">可重复读</td>\n<td align=\"left\">√</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n</tr>\n<tr>\n<td align=\"left\">可串行化</td>\n<td align=\"left\">√</td>\n<td align=\"left\">√</td>\n<td align=\"left\">√</td>\n</tr>\n</tbody></table>\n<p>mysql事务默认的隔离级别是可重复读</p>\n<h1 id=\"MVCC多版本并发控制\"><a href=\"#MVCC多版本并发控制\" class=\"headerlink\" title=\"MVCC多版本并发控制\"></a>MVCC多版本并发控制</h1><p>写操作更新最新的版本快照，读操作读取旧的版本快照<br>MVCC规定只能读取已经提交的快照</p>\n<h1 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h1><h2 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B+树\"></a>B+树</h2><p>与红黑树比较</p>\n<ul>\n<li>B+树具有更低的树高</li>\n<li>磁盘访问原理，一个物理块可以存储更多的节点</li>\n<li>减少预读特性</li>\n</ul>\n<h2 id=\"索引的优点\"><a href=\"#索引的优点\" class=\"headerlink\" title=\"索引的优点\"></a>索引的优点</h2><ul>\n<li>可以提高数据检索的效率，降低数据库的IO成本</li>\n<li>通过索引列对数据进行排序，降低了CPU的消耗</li>\n</ul>\n<h2 id=\"索引的缺点\"><a href=\"#索引的缺点\" class=\"headerlink\" title=\"索引的缺点\"></a>索引的缺点</h2><ul>\n<li>占用磁盘空间</li>\n<li>降低更新表的效率，插入删除会破坏平衡性，需要对树进行分裂、合并、旋转等操作来维护平衡性</li>\n</ul>\n<h2 id=\"索引分类\"><a href=\"#索引分类\" class=\"headerlink\" title=\"索引分类\"></a>索引分类</h2><h3 id=\"单列索引\"><a href=\"#单列索引\" class=\"headerlink\" title=\"单列索引\"></a>单列索引</h3><ul>\n<li>普通索引：没有任何限制</li>\n<li>唯一索引：索引列中的值唯一，允许空值</li>\n<li>主键索引：特殊的唯一索引，不允许空值</li>\n</ul>\n<h3 id=\"组合索引\"><a href=\"#组合索引\" class=\"headerlink\" title=\"组合索引\"></a>组合索引</h3><p>对多个列进行索引</p>\n","categories":["CS-Notes","数据库"],"tags":["数据库"]},{"title":"模板","url":"/2022/03/29/%E6%A8%A1%E6%9D%BF/","content":"<p><img src=\"http://fwnhub.cn:8888/Chevereto/images/2022/03/31/wallhaven-k7g7yq_1920x1080.png\"><br>一些算法的模板，c++语言</p>\n<span id=\"more\"></span>\n\n<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><h2 id=\"AC自动机\"><a href=\"#AC自动机\" class=\"headerlink\" title=\"AC自动机\"></a>AC自动机</h2><p>题意：在文本串中查询每个模式串出现的次数，但是不可重叠。例：aba在abababa中出现了两次</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">600009</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AC</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">26</span>; j++)</span><br><span class=\"line\">                trie[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            fail[i] = ans[i] = count[i] = len[i] = id[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            p[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">char</span> c[])</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = <span class=\"built_in\">strlen</span>(c), root = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> k = c[i] - <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!trie[root][k]) trie[root][k] = ++cnt;</span><br><span class=\"line\">            root = trie[root][k];</span><br><span class=\"line\">            len[root] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count[root]++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getId</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">char</span> c[])</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        id[i] = <span class=\"built_in\">insert</span>(c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getFail</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!trie[<span class=\"number\">0</span>][i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            fail[trie[<span class=\"number\">0</span>][i]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            q.<span class=\"built_in\">push</span>(trie[<span class=\"number\">0</span>][i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> now = q.<span class=\"built_in\">front</span>(); q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!trie[now][i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"type\">int</span> u = fail[now], v = trie[now][i];</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(u &amp;&amp; !trie[u][i]) u = fail[u];</span><br><span class=\"line\">                fail[v] = trie[u][i];</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Query</span><span class=\"params\">(<span class=\"type\">char</span> c[])</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = <span class=\"built_in\">strlen</span>(c);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> k = c[i] - <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(j &amp;&amp; !trie[j][k]) j = fail[j];</span><br><span class=\"line\">            j = trie[j][k];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> now = j; now; now = fail[now])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[now]==<span class=\"number\">-1</span> || i-p[now]&gt;=len[now])</span><br><span class=\"line\">                    ans[now]++, p[now] = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getAns</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans[id[x]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> trie[N][<span class=\"number\">26</span>], fail[N], cnt, ans[N];</span><br><span class=\"line\">    <span class=\"type\">int</span> len[N], count[N], p[N], id[N];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">AC ans;</span><br><span class=\"line\"><span class=\"type\">int</span> T, n;</span><br><span class=\"line\"><span class=\"type\">char</span> text[N], mode[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;input.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;output.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans.<span class=\"built_in\">init</span>();</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, text);</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, mode), ans.<span class=\"built_in\">getId</span>(i, mode);</span><br><span class=\"line\">        ans.<span class=\"built_in\">getFail</span>();</span><br><span class=\"line\">        ans.<span class=\"built_in\">Query</span>(text);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans.<span class=\"built_in\">getAns</span>(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP\"></a>KMP</h2><h3 id=\"Hdu-1711-Number-Sequence\"><a href=\"#Hdu-1711-Number-Sequence\" class=\"headerlink\" title=\"Hdu 1711-Number Sequence\"></a>Hdu 1711-Number Sequence</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1000009</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, T;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getFail</span><span class=\"params\">(<span class=\"type\">int</span> *a, <span class=\"type\">int</span> *fail)</span> </span>&#123;</span><br><span class=\"line\">    fail[<span class=\"number\">0</span>] = fail[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> j = fail[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j &amp;&amp; a[j] != a[i]) j = fail[j];</span><br><span class=\"line\">        fail[i + <span class=\"number\">1</span>] = a[j] == a[i] ? j + <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> fail[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">kmp</span><span class=\"params\">(<span class=\"type\">int</span> *a, <span class=\"type\">int</span> *b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j &amp;&amp; b[j] != a[i]) j = fail[j];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b[j] == a[i]) j++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j &gt;= m) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i - m + <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N], b[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;input.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;output.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">            fail[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">getFail</span>(b, fail);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"built_in\">kmp</span>(a, b);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h2><h2 id=\"双Hash\"><a href=\"#双Hash\" class=\"headerlink\" title=\"双Hash\"></a>双Hash</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MP(a, b) make_pair(a, b)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ULL;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;ULL, ULL&gt; Pair;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">400009</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> ULL P = <span class=\"number\">233</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> ULL Mod1 = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> ULL Mod2 = <span class=\"number\">1e9</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">char</span> c[N];</span><br><span class=\"line\">ULL p[N], _p[N];</span><br><span class=\"line\">Pair _hash[N];</span><br><span class=\"line\">map&lt;Pair, ULL&gt; f;</span><br><span class=\"line\">vector&lt;Pair&gt; g;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T num = <span class=\"number\">0</span>; <span class=\"type\">char</span> c; <span class=\"type\">bool</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((c=<span class=\"built_in\">getchar</span>())==<span class=\"string\">&#x27; &#x27;</span> || c==<span class=\"string\">&#x27;\\n&#x27;</span> || c==<span class=\"string\">&#x27;\\r&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;-&#x27;</span>) flag = <span class=\"number\">1</span>; <span class=\"keyword\">else</span> num = c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">isdigit</span>(c=<span class=\"built_in\">getchar</span>()))</span><br><span class=\"line\">        num = num * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag ? -num : num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Pair <span class=\"title\">getHash</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ULL tmp1 = (_hash[r].first - _hash[l - <span class=\"number\">1</span>].first * p[r - l + <span class=\"number\">1</span>] % Mod1 + Mod1) % Mod1;</span><br><span class=\"line\">    ULL tmp2 = (_hash[r].second - _hash[l - <span class=\"number\">1</span>].second * _p[r - l + <span class=\"number\">1</span>] % Mod2 + Mod2) % Mod2;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">MP</span>(tmp1, tmp2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;input.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;output.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    p[<span class=\"number\">0</span>] = <span class=\"number\">1</span>; _p[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">400000</span>; i++)</span><br><span class=\"line\">        p[i] = (p[i - <span class=\"number\">1</span>] * P) % Mod1, _p[i] = (_p[i - <span class=\"number\">1</span>] * P) % Mod2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; c+<span class=\"number\">1</span>;</span><br><span class=\"line\">        m = <span class=\"built_in\">strlen</span>(c + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">            _hash[j].first = (_hash[j - <span class=\"number\">1</span>].first * P % Mod1 + c[j]) % Mod1,</span><br><span class=\"line\">        _hash[j].second = (_hash[j - <span class=\"number\">1</span>].second * P % Mod2  + c[j]) % Mod2;</span><br><span class=\"line\">        f[_hash[m]]++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j + j &lt; m; j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">getHash</span>(<span class=\"number\">1</span>, j) == <span class=\"built_in\">getHash</span>(m - j + <span class=\"number\">1</span>, m))</span><br><span class=\"line\">                g.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">getHash</span>(j + <span class=\"number\">1</span>, m - j));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ULL ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : g)</span><br><span class=\"line\">        ans += f[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : f)</span><br><span class=\"line\">        ans += i.second * (i.second - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Manacher\"><a href=\"#Manacher\" class=\"headerlink\" title=\"Manacher\"></a>Manacher</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">300009</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> T, n, m, p[N], len1, len2;</span><br><span class=\"line\"><span class=\"type\">char</span> s[N], str[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T num = <span class=\"number\">0</span>; <span class=\"type\">char</span> c; <span class=\"type\">bool</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((c=<span class=\"built_in\">getchar</span>())==<span class=\"string\">&#x27; &#x27;</span> || c==<span class=\"string\">&#x27;\\n&#x27;</span> || c==<span class=\"string\">&#x27;\\r&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;-&#x27;</span>) flag = <span class=\"number\">1</span>; <span class=\"keyword\">else</span> num = c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">isdigit</span>(c=<span class=\"built_in\">getchar</span>()))</span><br><span class=\"line\">        num = num * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag ? -num : num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    str[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;$&#x27;</span>;</span><br><span class=\"line\">    str[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;#&#x27;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> id = <span class=\"number\">0</span>, mx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len1; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        str[<span class=\"number\">2</span> * i + <span class=\"number\">2</span>] = s[i];</span><br><span class=\"line\">        str[<span class=\"number\">2</span> * i + <span class=\"number\">3</span>] = <span class=\"string\">&#x27;#&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    len2 = <span class=\"number\">2</span> * len1 + <span class=\"number\">2</span>;</span><br><span class=\"line\">    str[len2] = <span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">manacher</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> id = <span class=\"number\">0</span>, mx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; len2; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mx&gt;i)</span><br><span class=\"line\">            p[i] = <span class=\"built_in\">min</span>(p[<span class=\"number\">2</span> * id - i], mx - i);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            p[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; str[i + p[i]] == str[i - p[i]]; p[i]++);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i+p[i]&gt;mx)</span><br><span class=\"line\">            mx = i + p[i], id = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;input.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;output.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>((<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, s))!=EOF)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        len1 = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">        <span class=\"built_in\">init</span>();</span><br><span class=\"line\">        <span class=\"built_in\">manacher</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len2; i++)</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, p[i]);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数学\"><a href=\"#数学\" class=\"headerlink\" title=\"数学\"></a>数学</h1><h2 id=\"求二维坐标点的最短距离\"><a href=\"#求二维坐标点的最短距离\" class=\"headerlink\" title=\"求二维坐标点的最短距离\"></a>求二维坐标点的最短距离</h2><h3 id=\"POJ3714-Raid\"><a href=\"#POJ3714-Raid\" class=\"headerlink\" title=\"POJ3714 Raid\"></a>POJ3714 Raid</h3><p>题意：有n个核电站和n个特工，位置为二维坐标，问距离核电站最近的特工距核电站多远</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">double</span> DB;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100009</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> DB INF = <span class=\"number\">2e18</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>()&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(DB x, DB y, <span class=\"type\">int</span> mark):<span class=\"built_in\">x</span>(x), <span class=\"built_in\">y</span>(y), <span class=\"built_in\">mark</span>(mark)&#123;&#125;</span><br><span class=\"line\">    DB x, y;</span><br><span class=\"line\">    <span class=\"type\">int</span> mark;</span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"type\">const</span> Node&amp;a)</span><br><span class=\"line\">    <span class=\"type\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==a.x)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> y &lt; a.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; a.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Node g[<span class=\"number\">2</span>*N], tmp[<span class=\"number\">2</span>*N];</span><br><span class=\"line\"><span class=\"type\">int</span> T, n, m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"type\">const</span> Node&amp;a, <span class=\"type\">const</span> Node&amp;b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">DB <span class=\"title\">dist</span><span class=\"params\">(Node a, Node b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.mark==b.mark) <span class=\"keyword\">return</span> INF;</span><br><span class=\"line\">    DB dx = a.x - b.x;</span><br><span class=\"line\">    DB dy = a.y - b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(dx*dx+dy*dy);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">DB <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l&gt;=r) <span class=\"keyword\">return</span> INF;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r-l==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">dist</span>(g[l], g[r]);</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    DB lval = <span class=\"built_in\">dfs</span>(l, mid);</span><br><span class=\"line\">    DB rval = <span class=\"built_in\">dfs</span>(mid, r);</span><br><span class=\"line\">    DB ans = <span class=\"built_in\">min</span>(lval, rval);</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = l; i &lt;= r; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(g[i].x-g[mid].x)&lt;ans)</span><br><span class=\"line\">            tmp[++cnt] = g[i];</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(tmp+<span class=\"number\">1</span>, tmp+cnt+<span class=\"number\">1</span>, cmp);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; cnt; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i+<span class=\"number\">1</span>; (j&lt;=cnt) &amp;&amp; (tmp[j].y-tmp[i].y&lt;ans); j++)</span><br><span class=\"line\">            ans = <span class=\"built_in\">min</span>(ans, <span class=\"built_in\">dist</span>(tmp[i], tmp[j]));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            DB x, y;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lf%lf&quot;</span>, &amp;x, &amp;y);</span><br><span class=\"line\">            g[i] = <span class=\"built_in\">Node</span>(x, y, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            DB x, y;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lf%lf&quot;</span>, &amp;x, &amp;y);</span><br><span class=\"line\">            g[i+n] = <span class=\"built_in\">Node</span>(x, y, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(g+<span class=\"number\">1</span>, g+<span class=\"number\">2</span>*n+<span class=\"number\">1</span>);</span><br><span class=\"line\">        DB ans = <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>*n);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.3lf\\n&quot;</span>, ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"向量\"><a href=\"#向量\" class=\"headerlink\" title=\"向量\"></a>向量</h2><p>向量四则运算，点积，叉积，夹角等</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">double</span> DB;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1009</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> DB PI = <span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Vector</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Vector</span>()&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Vector</span>(DB x, DB y):<span class=\"built_in\">x</span>(x), <span class=\"built_in\">y</span>(y)&#123;&#125;</span><br><span class=\"line\">    DB x, y;</span><br><span class=\"line\">    Vector <span class=\"keyword\">operator</span>+(Vector a) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Vector</span>(x + a.x, y + a.y); &#125;</span><br><span class=\"line\">    Vector <span class=\"keyword\">operator</span>-(Vector a) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Vector</span>(x - a.x, y - a.y); &#125;</span><br><span class=\"line\">    Vector <span class=\"keyword\">operator</span>*(DB a) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Vector</span>(x * a, y * a); &#125;</span><br><span class=\"line\">    Vector <span class=\"keyword\">operator</span>/(DB a) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Vector</span>(x / a, y / a); &#125;</span><br><span class=\"line\">    <span class=\"function\">DB <span class=\"title\">Dot</span><span class=\"params\">(Vector a)</span> </span>&#123; <span class=\"keyword\">return</span> x * a.x + y * a.y; &#125;</span><br><span class=\"line\">    <span class=\"function\">DB <span class=\"title\">Length</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">Dot</span>(*<span class=\"keyword\">this</span>)); &#125;</span><br><span class=\"line\">    <span class=\"function\">DB <span class=\"title\">Cross</span><span class=\"params\">(Vector a)</span> </span>&#123; <span class=\"keyword\">return</span> x * a.y - y * a.x; &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 向量旋转，rad为逆时针旋转的角，弧度制</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Rotate</span><span class=\"params\">(DB rad)</span> </span>&#123; *<span class=\"keyword\">this</span> = <span class=\"built_in\">Vector</span>(x * <span class=\"built_in\">cos</span>(rad) - y * <span class=\"built_in\">sin</span>(rad), x * <span class=\"built_in\">sin</span>(rad) + y * <span class=\"built_in\">cos</span>(rad)); &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 单位法线</span></span><br><span class=\"line\">    <span class=\"function\">Vector <span class=\"title\">Normal</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Vector</span>(-y / <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">Length</span>(), x / <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">Length</span>()); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\">DB <span class=\"title\">Angle</span><span class=\"params\">(Vector a, Vector b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">acos</span>(a.<span class=\"built_in\">Dot</span>(b) / a.<span class=\"built_in\">Length</span>() / b.<span class=\"built_in\">Length</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">Vector <span class=\"title\">toVector</span><span class=\"params\">(DB x_1, DB y_1, DB x_2, DB y_2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Vector</span>(x_2 - x_1, y_2 - y_1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 叉积求三角形面积 Area2为三角形面积2倍，按照逆时针顺序给出三个点</span></span><br><span class=\"line\"><span class=\"function\">DB <span class=\"title\">Area2</span><span class=\"params\">(DB x_1, DB y_1, DB x_2, DB y_2, DB x_3, DB y_3)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">toVector</span>(x_1, y_1, x_2, y_2).<span class=\"built_in\">Cross</span>(<span class=\"built_in\">toVector</span>(x_1, y_1, x_3, y_3));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 逆时针顺序给出三个点</span></span><br><span class=\"line\"><span class=\"function\">DB <span class=\"title\">Area</span><span class=\"params\">(DB x_1, DB y_1, DB x_2, DB y_2, DB x_3, DB y_3)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(<span class=\"built_in\">Area2</span>(x_1, y_1, x_2, y_2, x_3, y_3));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断向量b,c是否在a的两侧</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">notSameSide</span><span class=\"params\">(Vector a, Vector b, Vector c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"built_in\">Cross</span>(b) * a.<span class=\"built_in\">Cross</span>(c) &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断平行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Parallel</span><span class=\"params\">(Vector a, Vector b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"built_in\">Cross</span>(b) == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Vector Point;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\">Point g[N][<span class=\"number\">2</span>], p[N][<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> f[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;input.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;output.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    DB x, y;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lf%lf&quot;</span>, &amp;x, &amp;y);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lf%lf%lf%lf&quot;</span>, &amp;g[i][<span class=\"number\">0</span>].x, &amp;g[i][<span class=\"number\">0</span>].y, &amp;g[i][<span class=\"number\">1</span>].x, &amp;g[i][<span class=\"number\">1</span>].y);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lf%lf%lf%lf&quot;</span>, &amp;p[i][<span class=\"number\">0</span>].x, &amp;p[i][<span class=\"number\">0</span>].y, &amp;p[i][<span class=\"number\">1</span>].x, &amp;p[i][<span class=\"number\">1</span>].y);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Vector vec1 = <span class=\"built_in\">toVector</span>(p[i][<span class=\"number\">0</span>].x, p[i][<span class=\"number\">0</span>].y, p[i][<span class=\"number\">1</span>].x, p[i][<span class=\"number\">1</span>].y);</span><br><span class=\"line\">        Vector vec2 = <span class=\"built_in\">toVector</span>(p[i][<span class=\"number\">0</span>].x, p[i][<span class=\"number\">0</span>].y, x, y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vec2.<span class=\"built_in\">Length</span>() &gt; vec1.<span class=\"built_in\">Length</span>() || vec1.<span class=\"built_in\">Dot</span>(vec2) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"type\">bool</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Vector a = <span class=\"built_in\">toVector</span>(p[i][<span class=\"number\">0</span>].x, p[i][<span class=\"number\">0</span>].y, g[i][<span class=\"number\">0</span>].x, g[i][<span class=\"number\">0</span>].y);</span><br><span class=\"line\">            Vector b = <span class=\"built_in\">toVector</span>(p[i][<span class=\"number\">0</span>].x, p[i][<span class=\"number\">0</span>].y, g[i][<span class=\"number\">1</span>].x, g[i][<span class=\"number\">1</span>].y);</span><br><span class=\"line\">            Vector c = <span class=\"built_in\">toVector</span>(g[i][<span class=\"number\">0</span>].x, g[i][<span class=\"number\">0</span>].y, p[i][<span class=\"number\">0</span>].x, p[i][<span class=\"number\">0</span>].y);</span><br><span class=\"line\">            Vector d = <span class=\"built_in\">toVector</span>(g[i][<span class=\"number\">0</span>].x, g[i][<span class=\"number\">0</span>].y, p[i][<span class=\"number\">1</span>].x, p[i][<span class=\"number\">1</span>].y);</span><br><span class=\"line\">            Vector _p = <span class=\"built_in\">toVector</span>(p[i][<span class=\"number\">0</span>].x, p[i][<span class=\"number\">0</span>].y, p[i][<span class=\"number\">1</span>].x, p[i][<span class=\"number\">1</span>].y);</span><br><span class=\"line\">            Vector _q = <span class=\"built_in\">toVector</span>(g[i][<span class=\"number\">0</span>].x, g[i][<span class=\"number\">0</span>].y, g[i][<span class=\"number\">1</span>].x, g[i][<span class=\"number\">1</span>].y);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">notSameSide</span>(_p, a, b) &amp;&amp; <span class=\"built_in\">notSameSide</span>(_q, c, d))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i==j)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            Vector a = <span class=\"built_in\">toVector</span>(p[j][<span class=\"number\">0</span>].x, p[j][<span class=\"number\">0</span>].y, p[i][<span class=\"number\">0</span>].x, p[i][<span class=\"number\">0</span>].y);</span><br><span class=\"line\">            Vector b = <span class=\"built_in\">toVector</span>(p[j][<span class=\"number\">0</span>].x, p[j][<span class=\"number\">0</span>].y, p[i][<span class=\"number\">1</span>].x, p[i][<span class=\"number\">1</span>].y);</span><br><span class=\"line\">            Vector c = <span class=\"built_in\">Vector</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>) - a;</span><br><span class=\"line\">            Vector d = <span class=\"built_in\">Vector</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>) - b;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a.<span class=\"built_in\">Cross</span>(b) == <span class=\"number\">0</span> &amp;&amp; c.<span class=\"built_in\">Dot</span>(d) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        f[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[i])</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;visible&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;not visible&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"求圆并\"><a href=\"#求圆并\" class=\"headerlink\" title=\"求圆并\"></a>求圆并</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> PI = <span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> EPS = <span class=\"number\">1e-8</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">2009</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sgn</span><span class=\"params\">(<span class=\"type\">double</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (x &gt; EPS) - (x &lt; -EPS);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">Point</span>() &#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Point</span>(<span class=\"type\">double</span> x, <span class=\"type\">double</span> y) : <span class=\"built_in\">x</span>(x), <span class=\"built_in\">y</span>(y) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"type\">double</span> x, y;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">angle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">atan2</span>(y, x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPoint <span class=\"keyword\">operator</span> + (<span class=\"type\">const</span> Point&amp;rhs) <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Point</span>(x + rhs.x, y + rhs.y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPoint <span class=\"keyword\">operator</span> - (<span class=\"type\">const</span> Point&amp;rhs) <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Point</span>(x - rhs.x, y - rhs.y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPoint <span class=\"keyword\">operator</span> * (<span class=\"type\">double</span> t) <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Point</span>(x * t, y * t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPoint <span class=\"keyword\">operator</span> / (<span class=\"type\">double</span> t) <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Point</span>(x / t, y / t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">length</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(x * x + y * y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Point <span class=\"title\">unit</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">double</span> l = <span class=\"built_in\">length</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Point</span>(x / l, y / l);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">cross</span><span class=\"params\">(<span class=\"type\">const</span> Point &amp;a, <span class=\"type\">const</span> Point &amp;b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a.x * b.y - a.y * b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">dist</span><span class=\"params\">(<span class=\"type\">const</span> Point &amp;p1, <span class=\"type\">const</span> Point &amp;p2)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (p1 - p2).<span class=\"built_in\">length</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 弧度制</span></span><br><span class=\"line\"><span class=\"function\">Point <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"type\">const</span> Point &amp;p, <span class=\"type\">double</span> angle, <span class=\"type\">const</span> Point &amp;o = Point(<span class=\"number\">0</span>, <span class=\"number\">0</span>))</span> </span>&#123;</span><br><span class=\"line\">\tPoint t = p - o;</span><br><span class=\"line\">\t<span class=\"type\">double</span> x = t.x * <span class=\"built_in\">cos</span>(angle) - t.y * <span class=\"built_in\">sin</span>(angle);</span><br><span class=\"line\">\t<span class=\"type\">double</span> y = t.y * <span class=\"built_in\">cos</span>(angle) + t.x * <span class=\"built_in\">sin</span>(angle);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">Point</span>(x, y) + o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Region</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">Region</span>() &#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Region</span>(<span class=\"type\">double</span> st, <span class=\"type\">double</span> ed) : <span class=\"built_in\">st</span>(st), <span class=\"built_in\">ed</span>(ed) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"type\">double</span> st, ed;</span><br><span class=\"line\">\t<span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"type\">const</span> Region &amp;rhs) <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">sgn</span>(st - rhs.st))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> st &lt; rhs.st;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ed &lt; rhs.ed;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Circle</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">Circle</span>() &#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Circle</span>(Point c, <span class=\"type\">double</span> r) : <span class=\"built_in\">c</span>(c), <span class=\"built_in\">r</span>(r) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">Circle</span>(<span class=\"type\">double</span> x, <span class=\"type\">double</span> y, <span class=\"type\">double</span> r) : <span class=\"built_in\">c</span>(<span class=\"built_in\">Point</span>(x, y)), <span class=\"built_in\">r</span>(r) &#123;&#125;</span><br><span class=\"line\">\tPoint c;</span><br><span class=\"line\">\t<span class=\"type\">double</span> r;</span><br><span class=\"line\">\tvector&lt;Region&gt; reg;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">const</span> Region &amp;r)</span> </span>&#123;</span><br><span class=\"line\">\t\treg.<span class=\"built_in\">push_back</span>(r);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">contain</span><span class=\"params\">(<span class=\"type\">const</span> Circle &amp;cir)</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">sgn</span>(<span class=\"built_in\">dist</span>(cir.c, c) + cir.r - r) &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">intersect</span><span class=\"params\">(<span class=\"type\">const</span> Circle &amp;cir)</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">sgn</span>(<span class=\"built_in\">dist</span>(cir.c, c) - cir.r - r) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">sqr</span><span class=\"params\">(<span class=\"type\">double</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">intersection</span><span class=\"params\">(<span class=\"type\">const</span> Circle &amp;cir1, <span class=\"type\">const</span> Circle &amp;cir2, Point &amp;p1, Point &amp;p2)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">double</span> l = <span class=\"built_in\">dist</span>(cir1.c, cir2.c);</span><br><span class=\"line\">\t<span class=\"type\">double</span> d = (<span class=\"built_in\">sqr</span>(l) - <span class=\"built_in\">sqr</span>(cir2.r) + <span class=\"built_in\">sqr</span>(cir1.r)) / (<span class=\"number\">2</span> * l);</span><br><span class=\"line\">\t<span class=\"type\">double</span> d2 = <span class=\"built_in\">sqrt</span>(<span class=\"built_in\">sqr</span>(cir1.r) - <span class=\"built_in\">sqr</span>(d));</span><br><span class=\"line\">\tPoint mid = cir1.c + (cir2.c - cir1.c).<span class=\"built_in\">unit</span>() * d;</span><br><span class=\"line\">\tPoint v = <span class=\"built_in\">rotate</span>(cir2.c - cir1.c, PI / <span class=\"number\">2</span>).<span class=\"built_in\">unit</span>() * d2;</span><br><span class=\"line\">\tp1 = mid + v, p2 = mid - v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Point <span class=\"title\">calc</span><span class=\"params\">(<span class=\"type\">const</span> Circle &amp;cir, <span class=\"type\">double</span> angle)</span> </span>&#123;</span><br><span class=\"line\">\tPoint p = <span class=\"built_in\">Point</span>(cir.c.x + cir.r, cir.c.y);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">rotate</span>(p, angle, cir.c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Circle cir[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> del[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">double</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(del, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(del));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) cir[i].reg.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) <span class=\"keyword\">if</span>(!del[j]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i == j) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(cir[j].<span class=\"built_in\">contain</span>(cir[i])) &#123;</span><br><span class=\"line\">\t\t\t\tdel[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) <span class=\"keyword\">if</span>(!del[i]) &#123;</span><br><span class=\"line\">\t\tCircle &amp;mc = cir[i];</span><br><span class=\"line\">\t\tPoint p1, p2;</span><br><span class=\"line\">\t\t<span class=\"type\">bool</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) <span class=\"keyword\">if</span>(!del[j]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i == j) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!mc.<span class=\"built_in\">intersect</span>(cir[j])) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\tflag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">intersection</span>(mc, cir[j], p1, p2);</span><br><span class=\"line\">\t\t\t<span class=\"type\">double</span> rs = (p2 - mc.c).<span class=\"built_in\">angle</span>(), rt = (p1 - mc.c).<span class=\"built_in\">angle</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">sgn</span>(rs) &lt; <span class=\"number\">0</span>) rs += <span class=\"number\">2.0</span> * PI;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">sgn</span>(rt) &lt; <span class=\"number\">0</span>) rt += <span class=\"number\">2.0</span> * PI;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">sgn</span>(rs - rt) &gt; <span class=\"number\">0</span>) mc.<span class=\"built_in\">add</span>(<span class=\"built_in\">Region</span>(rs, PI * <span class=\"number\">2.0</span>)), mc.<span class=\"built_in\">add</span>(<span class=\"built_in\">Region</span>(<span class=\"number\">0</span>, rt));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> mc.<span class=\"built_in\">add</span>(<span class=\"built_in\">Region</span>(rs, rt));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!flag) &#123;</span><br><span class=\"line\">\t\t\tans += PI * <span class=\"built_in\">sqr</span>(mc.r);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">sort</span>(mc.reg.<span class=\"built_in\">begin</span>(), mc.reg.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; <span class=\"built_in\">int</span>(mc.reg.<span class=\"built_in\">size</span>()); j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">sgn</span>(mc.reg[cnt - <span class=\"number\">1</span>].ed - mc.reg[j].st) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tmc.reg[cnt - <span class=\"number\">1</span>].ed = <span class=\"built_in\">max</span>(mc.reg[cnt - <span class=\"number\">1</span>].ed, mc.reg[j].ed);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> mc.reg[cnt++] = mc.reg[j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmc.<span class=\"built_in\">add</span>(<span class=\"built_in\">Region</span>());</span><br><span class=\"line\">\t\tmc.reg[cnt] = mc.reg[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; cnt; j++) &#123;</span><br><span class=\"line\">\t\t\tp1 = <span class=\"built_in\">calc</span>(mc, mc.reg[j].ed);</span><br><span class=\"line\">\t\t\tp2 = <span class=\"built_in\">calc</span>(mc, mc.reg[j + <span class=\"number\">1</span>].st);</span><br><span class=\"line\">\t\t\tans += <span class=\"built_in\">cross</span>(p1, p2) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t<span class=\"type\">double</span> angle = mc.reg[j + <span class=\"number\">1</span>].st - mc.reg[j].ed;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">sgn</span>(angle) &lt; <span class=\"number\">0</span>) angle += <span class=\"number\">2.0</span> * PI;</span><br><span class=\"line\">\t\t\tans += <span class=\"number\">0.5</span> * <span class=\"built_in\">sqr</span>(mc.r) * (angle - <span class=\"built_in\">sin</span>(angle));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Point p[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;input.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">\t<span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;output.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">double</span> x, y;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lf%lf&quot;</span>, &amp;x, &amp;y);</span><br><span class=\"line\">\t\tp[i] = <span class=\"built_in\">Point</span>(x, y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> q;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;q);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; q; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">double</span> r, S = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lf&quot;</span>, &amp;r);</span><br><span class=\"line\">\t\tS = <span class=\"number\">1.0</span> * n * PI * r * r;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">\t\t\tcir[j] = <span class=\"built_in\">Circle</span>(p[j], r);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.15lf\\n&quot;</span>, <span class=\"built_in\">solve</span>() / S);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"FFT\"><a href=\"#FFT\" class=\"headerlink\" title=\"FFT\"></a>FFT</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">4000009</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> PI = <span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Complex</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Complex</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Complex</span>(<span class=\"type\">double</span> r, <span class=\"type\">double</span> i) : <span class=\"built_in\">r</span>(r), <span class=\"built_in\">i</span>(i) &#123;&#125;</span><br><span class=\"line\">    <span class=\"type\">double</span> r, i;</span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span> + (<span class=\"type\">const</span> Complex &amp;a) <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Complex</span>(r + a.r, i + a.i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span> - (<span class=\"type\">const</span> Complex &amp;a) <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Complex</span>(r - a.r, i - a.i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Complex <span class=\"keyword\">operator</span> * (<span class=\"type\">const</span> Complex &amp;a) <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Complex</span>(r * a.r - i * a.i, r * a.i + i * a.r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">real</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">image</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> T, n, m, len, rev[N];</span><br><span class=\"line\">Complex a[N], b[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    T num = <span class=\"number\">0</span>; <span class=\"type\">char</span> c; <span class=\"type\">bool</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((c=<span class=\"built_in\">getchar</span>())==<span class=\"string\">&#x27; &#x27;</span> || c==<span class=\"string\">&#x27;\\n&#x27;</span> || c==<span class=\"string\">&#x27;\\r&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;-&#x27;</span>) flag = <span class=\"number\">1</span>; <span class=\"keyword\">else</span> num = c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">isdigit</span>(c=<span class=\"built_in\">getchar</span>()))</span><br><span class=\"line\">        num = num * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag ? -num : num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    len = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(len &lt;= length)</span><br><span class=\"line\">        len &lt;&lt;= <span class=\"number\">1</span>, tmp++;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">        rev[i] = (rev[i &gt;&gt; <span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">1</span>) | ((i &amp; <span class=\"number\">1</span>) &lt;&lt; (tmp - <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(Complex *A, <span class=\"type\">int</span> inv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; rev[i])</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(A[i], A[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i &lt;&lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        Complex tmp = <span class=\"built_in\">Complex</span>(<span class=\"built_in\">cos</span>(PI / i), inv * <span class=\"built_in\">sin</span>(PI / i));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; len; j += (i &lt;&lt; <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            Complex omega = <span class=\"built_in\">Complex</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; i; k++, omega = omega * tmp) &#123;</span><br><span class=\"line\">                Complex x = A[j + k], y = omega * A[j + k + i];</span><br><span class=\"line\">                A[j + k] = x + y, A[j + k + i] = x - y;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;input.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;output.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">    m = <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> r = <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">        a[i] = <span class=\"built_in\">Complex</span>(<span class=\"number\">1.0</span> * r, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> r = <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">        b[i] = <span class=\"built_in\">Complex</span>(<span class=\"number\">1.0</span> * r, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>(n + m);</span><br><span class=\"line\">    <span class=\"built_in\">FFT</span>(a, <span class=\"number\">1</span>), <span class=\"built_in\">FFT</span>(b, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">        a[i] = a[i] * b[i];</span><br><span class=\"line\">    <span class=\"built_in\">FFT</span>(a, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n + m; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d%c&quot;</span>, <span class=\"built_in\">int</span>(a[i].r / len + <span class=\"number\">0.5</span>), i == n + m ? <span class=\"string\">&#x27;\\n&#x27;</span> : <span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"组合数学\"><a href=\"#组合数学\" class=\"headerlink\" title=\"组合数学\"></a>组合数学</h2><h2 id=\"Meisell-Lehmer-小于等于n的素数个数\"><a href=\"#Meisell-Lehmer-小于等于n的素数个数\" class=\"headerlink\" title=\"Meisell-Lehmer(小于等于n的素数个数)\"></a>Meisell-Lehmer(小于等于n的素数个数)</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> IL inline</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RG register</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N=<span class=\"number\">5000005</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> M=<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> PM=<span class=\"number\">2</span>*<span class=\"number\">3</span>*<span class=\"number\">5</span>*<span class=\"number\">7</span>*<span class=\"number\">11</span>*<span class=\"number\">13</span>*<span class=\"number\">17</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> p[N],pi[N];</span><br><span class=\"line\"><span class=\"type\">int</span> phi[PM+<span class=\"number\">1</span>][M+<span class=\"number\">1</span>],sz[M+<span class=\"number\">1</span>];</span><br><span class=\"line\">LL n;</span><br><span class=\"line\"><span class=\"type\">bool</span> f[N];</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"type\">void</span> <span class=\"title\">getprime</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(RG <span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;N;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!f[i])</span><br><span class=\"line\">            p[++p[<span class=\"number\">0</span>]]=i;</span><br><span class=\"line\">        pi[i]=p[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(RG <span class=\"type\">int</span> j=<span class=\"number\">1</span>;p[j]*i&lt;N;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            f[p[j]*i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%p[j]==<span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">getprime</span>();</span><br><span class=\"line\">    sz[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(RG <span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;=PM;i++)</span><br><span class=\"line\">        phi[i][<span class=\"number\">0</span>]=i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(RG <span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=M;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sz[i]=p[i]*sz[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(RG <span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=PM;j++)</span><br><span class=\"line\">            phi[j][i]=phi[j][i<span class=\"number\">-1</span>]-phi[j/p[i]][i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"type\">int</span> <span class=\"title\">sqrt2</span><span class=\"params\">(LL x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LL r=(LL)<span class=\"built_in\">sqrt</span>(x<span class=\"number\">-0.1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r*r&lt;=x) r++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"type\">int</span>)(r<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">IL <span class=\"type\">int</span> <span class=\"title\">sqrt3</span><span class=\"params\">(LL x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LL r=(LL)<span class=\"built_in\">cbrt</span>(x<span class=\"number\">-0.1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r*r*r&lt;=x) r++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"type\">int</span>)(r<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">IL LL <span class=\"title\">getphi</span><span class=\"params\">(LL x,<span class=\"type\">int</span> s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s&lt;=M) <span class=\"keyword\">return</span> phi[x%sz[s]][s]+(x/sz[s])*phi[sz[s]][s];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;=p[s]*p[s]*p[s]&amp;&amp;x&lt;N)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> s2x=pi[<span class=\"built_in\">sqrt2</span>(x)];</span><br><span class=\"line\">        LL ans=pi[x]-(s2x+s<span class=\"number\">-2</span>)*(s2x-s+<span class=\"number\">1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(RG <span class=\"type\">int</span> i=s+<span class=\"number\">1</span>;i&lt;=s2x;i++)</span><br><span class=\"line\">            ans+=pi[x/p[i]];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">getphi</span>(x,s<span class=\"number\">-1</span>)-<span class=\"built_in\">getphi</span>(x/p[s],s<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">IL LL <span class=\"title\">getpi</span><span class=\"params\">(LL x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;N) <span class=\"keyword\">return</span> pi[x];</span><br><span class=\"line\">    LL ans=<span class=\"built_in\">getphi</span>(x,pi[<span class=\"built_in\">sqrt3</span>(<span class=\"number\">3</span>)])+pi[<span class=\"built_in\">sqrt3</span>(x)]<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(RG <span class=\"type\">int</span> i=pi[<span class=\"built_in\">sqrt3</span>(x)]+<span class=\"number\">1</span>,ed=pi[<span class=\"built_in\">sqrt2</span>(x)];i&lt;=ed;i++)</span><br><span class=\"line\">        ans-=<span class=\"built_in\">getpi</span>(x/p[i])-i+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">MeiLeh</span><span class=\"params\">(LL x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;N) <span class=\"keyword\">return</span> pi[x];</span><br><span class=\"line\">    <span class=\"type\">int</span> a=(<span class=\"type\">int</span>)<span class=\"built_in\">MeiLeh</span>(<span class=\"built_in\">sqrt2</span>(<span class=\"built_in\">sqrt2</span>(x)));</span><br><span class=\"line\">    <span class=\"type\">int</span> b=(<span class=\"type\">int</span>)<span class=\"built_in\">MeiLeh</span>(<span class=\"built_in\">sqrt2</span>(x));</span><br><span class=\"line\">    <span class=\"type\">int</span> c=(<span class=\"type\">int</span>)<span class=\"built_in\">MeiLeh</span>(<span class=\"built_in\">sqrt3</span>(x));</span><br><span class=\"line\">    LL sum=<span class=\"built_in\">getphi</span>(x,a)+(LL)(b+a<span class=\"number\">-2</span>)*(b-a+<span class=\"number\">1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=a+<span class=\"number\">1</span>;i&lt;=b;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LL w=x/p[i];</span><br><span class=\"line\">        sum-=<span class=\"built_in\">MeiLeh</span>(w);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;c) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        LL lim=<span class=\"built_in\">MeiLeh</span>(<span class=\"built_in\">sqrt2</span>(w));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i;j&lt;=lim;j++)</span><br><span class=\"line\">            sum-=<span class=\"built_in\">MeiLeh</span>(w/p[j])-(j<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;n))!=EOF)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>,<span class=\"built_in\">MeiLeh</span>(n));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"高斯消元\"><a href=\"#高斯消元\" class=\"headerlink\" title=\"高斯消元\"></a>高斯消元</h2><h3 id=\"异或矩阵：2020ICPC济南-A\"><a href=\"#异或矩阵：2020ICPC济南-A\" class=\"headerlink\" title=\"异或矩阵：2020ICPC济南-A\"></a>异或矩阵：2020ICPC济南-A</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">209</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">const</span> LL <span class=\"title\">Mod</span><span class=\"params\">(<span class=\"number\">998244353LL</span>)</span></span>;</span><br><span class=\"line\"><span class=\"type\">int</span> T, n, m, A[N][N], B[N][N];</span><br><span class=\"line\">bitset&lt;N&gt; a[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T num = <span class=\"number\">0</span>; <span class=\"type\">char</span> c; <span class=\"type\">bool</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((c=<span class=\"built_in\">getchar</span>())==<span class=\"string\">&#x27; &#x27;</span> || c==<span class=\"string\">&#x27;\\n&#x27;</span> || c==<span class=\"string\">&#x27;\\r&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;-&#x27;</span>) flag = <span class=\"number\">1</span>; <span class=\"keyword\">else</span> num = c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">isdigit</span>(c=<span class=\"built_in\">getchar</span>()))</span><br><span class=\"line\">        num = num * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag ? -num : num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">ksm</span><span class=\"params\">(LL x, LL y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LL ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(y)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">            ans = (ans * x) % Mod;</span><br><span class=\"line\">        y &gt;&gt;= <span class=\"number\">1LL</span>;</span><br><span class=\"line\">        x = (x * x) % Mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans % Mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">gauss</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> r = <span class=\"number\">1</span>, c = <span class=\"number\">1</span>; r &lt;= n &amp;&amp; c &lt;= n; r++, c++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> i = r;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; i &lt;= n; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i][c])</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt; n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            --r;</span><br><span class=\"line\">            ++tmp;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(a[r], a[i]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = r + <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i][c])</span><br><span class=\"line\">                a[i] ^= a[r];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">ksm</span>(<span class=\"number\">2</span>, tmp) % Mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;input.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;output.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">            A[i][j] = <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">            B[i][j] = <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">    LL ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; k++)</span><br><span class=\"line\">                a[i][k] = A[i][k];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">            a[i][i] = a[i][i] ^ B[i][j];</span><br><span class=\"line\">        (ans *= <span class=\"built_in\">gauss</span>()) %= Mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"高斯消元取模行列式：2021ICPC济南-J-Determinant\"><a href=\"#高斯消元取模行列式：2021ICPC济南-J-Determinant\" class=\"headerlink\" title=\"高斯消元取模行列式：2021ICPC济南-J Determinant\"></a>高斯消元取模行列式：2021ICPC济南-J Determinant</h3><p>题意：给一个矩阵，确定其行列式正负，给出行列式的绝对值（大数，不超过10000bits）<br><br>题解：随机一个大数取模求行列式，与给的相等即为正，否则为负</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">LL <span class=\"title\">Determinant</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    LL ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!a[i][i]) &#123;</span><br><span class=\"line\">            <span class=\"type\">bool</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[j][i]) &#123;</span><br><span class=\"line\">                    flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"built_in\">swap</span>(a[i], a[j]);</span><br><span class=\"line\">                    ans = -ans;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!flag) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(a[j][i]) &#123;</span><br><span class=\"line\">                LL K = a[i][i] / a[j][i];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = i; k &lt; n; k++) &#123;</span><br><span class=\"line\">                    a[i][k] = (a[i][k] - K * a[j][k]) % Mod;</span><br><span class=\"line\">                    <span class=\"built_in\">swap</span>(a[i][k], a[j][k]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ans = -ans;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        (ans *= a[i][i]) %= Mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (ans + Mod) % Mod;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"图论\"><a href=\"#图论\" class=\"headerlink\" title=\"图论\"></a>图论</h1><h2 id=\"Tarjan\"><a href=\"#Tarjan\" class=\"headerlink\" title=\"Tarjan\"></a>Tarjan</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100009</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Edge</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Edge</span>(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y) : <span class=\"built_in\">x</span>(x), <span class=\"built_in\">y</span>(y) &#123;&#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">&#125; edge[N];</span><br><span class=\"line\"><span class=\"type\">int</span> T, n, m, q, cnt, scc_cnt, max_scc;</span><br><span class=\"line\"><span class=\"type\">int</span> dfn[N], low[N], scc_id[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; g[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\">stack&lt;<span class=\"type\">int</span>&gt; t;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dfn, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(dfn));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(low, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(low));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(scc_id, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(scc_id));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(vis));</span><br><span class=\"line\">    cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    scc_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    max_scc = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dfn[x] = low[x] = ++cnt;</span><br><span class=\"line\">    vis[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    t.<span class=\"built_in\">push</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:g[x])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!dfn[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">tarjan</span>(i);</span><br><span class=\"line\">            low[x] = <span class=\"built_in\">min</span>(low[x], low[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(vis[i])</span><br><span class=\"line\">            low[x] = <span class=\"built_in\">min</span>(low[x], dfn[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dfn[x] == low[x])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> now, count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        ++scc_cnt;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            now = t.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            t.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            scc_id[now] = scc_cnt;</span><br><span class=\"line\">            vis[now] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            ++count;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (now != x);</span><br><span class=\"line\">        max_scc = <span class=\"built_in\">max</span>(max_scc, count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;input.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;output.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">init</span>();</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">            g[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;edge[i].x, &amp;edge[i].y);</span><br><span class=\"line\">            g[edge[i].x].<span class=\"built_in\">push_back</span>(edge[i].y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!dfn[i])</span><br><span class=\"line\">                <span class=\"built_in\">tarjan</span>(i);</span><br><span class=\"line\">        <span class=\"type\">int</span> tmp = max_scc;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> k;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;k);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(scc_id[edge[k].x] == scc_id[edge[k].y])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, tmp);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            g[edge[k].y].<span class=\"built_in\">push_back</span>(edge[k].x);</span><br><span class=\"line\">            <span class=\"built_in\">init</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!dfn[i])</span><br><span class=\"line\">                    <span class=\"built_in\">tarjan</span>(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"built_in\">max</span>(tmp, max_scc));</span><br><span class=\"line\">            g[edge[k].y].<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">            <span class=\"built_in\">init</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!dfn[i])</span><br><span class=\"line\">                    <span class=\"built_in\">tarjan</span>(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"树链剖分\"><a href=\"#树链剖分\" class=\"headerlink\" title=\"树链剖分\"></a>树链剖分</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">50009</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SegmentTree</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> lc rt &lt;&lt; 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> rc rt &lt;&lt; 1 | 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        t[rt].val = t[rt].lzy = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l &gt;= r)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"built_in\">build</span>(l, mid, lc);</span><br><span class=\"line\">        <span class=\"built_in\">build</span>(mid + <span class=\"number\">1</span>, r, rc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_down</span><span class=\"params\">(<span class=\"type\">int</span> rt, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        t[lc].lzy += t[rt].lzy;</span><br><span class=\"line\">        t[rc].lzy += t[rt].lzy;</span><br><span class=\"line\">        t[lc].val += (mid - l + <span class=\"number\">1</span>) * t[rt].lzy;</span><br><span class=\"line\">        t[rc].val += (r - mid) * t[rt].lzy;</span><br><span class=\"line\">        t[rt].lzy = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_up</span><span class=\"params\">(<span class=\"type\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        t[rt].val = t[lc].val + t[rc].val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> rt, <span class=\"type\">int</span> L, <span class=\"type\">int</span> R, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r &lt; L || l &gt; R || l &gt; r || L &gt; R)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t[rt].lzy += v;</span><br><span class=\"line\">            t[rt].val += v * (r - l + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">push_down</span>(rt, l, r);</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(l, mid, lc, L, R, v);</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(mid + <span class=\"number\">1</span>, r, rc, L, R, v);</span><br><span class=\"line\">        <span class=\"built_in\">push_up</span>(rt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> rt, <span class=\"type\">int</span> L, <span class=\"type\">int</span> R)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r &lt; L || l &gt; R || l &gt; r || L &gt; R)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> t[rt].val;</span><br><span class=\"line\">        <span class=\"built_in\">push_down</span>(rt, l, r);</span><br><span class=\"line\">        <span class=\"type\">int</span> lval = <span class=\"built_in\">query</span>(l, mid, lc, L, R);</span><br><span class=\"line\">        <span class=\"type\">int</span> rval = <span class=\"built_in\">query</span>(mid + <span class=\"number\">1</span>, r, rc, L, R);</span><br><span class=\"line\">        <span class=\"built_in\">push_up</span>(rt);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lval + rval;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Node</span>() &#123;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> val, <span class=\"type\">int</span> lzy) : <span class=\"built_in\">val</span>(val), <span class=\"built_in\">lzy</span>(lzy) &#123;&#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> val, lzy;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    Node t[<span class=\"number\">4</span> * N];</span><br><span class=\"line\">&#125; t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> T, n, m, k, a[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; g[N];</span><br><span class=\"line\"><span class=\"type\">int</span> deep[N], son[N], size[N], fa[N];</span><br><span class=\"line\"><span class=\"type\">int</span> top[N], id[N], cnt, <span class=\"type\">sub_t</span>[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        g[i].<span class=\"built_in\">clear</span>(), fa[i] = <span class=\"number\">0</span>, top[i] = <span class=\"number\">0</span>, id[i] = <span class=\"number\">0</span>, <span class=\"type\">sub_t</span>[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> dep)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    deep[x] = dep;</span><br><span class=\"line\">    size[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    son[x] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : g[x])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == fa[x])</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        fa[i] = x;</span><br><span class=\"line\">        <span class=\"built_in\">dfs1</span>(i, dep + <span class=\"number\">1</span>);</span><br><span class=\"line\">        size[x] += size[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(size[i] &gt; size[son[x]])</span><br><span class=\"line\">            son[x] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">sub_t</span>[x] = cnt;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> tp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    id[x] = ++cnt;</span><br><span class=\"line\">    top[x] = tp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(son[x])</span><br><span class=\"line\">        <span class=\"built_in\">dfs2</span>(son[x], tp);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : g[x])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == fa[x] || i == son[x])</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs2</span>(i, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> z)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (top[x] != top[y])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(deep[top[x]] &gt; deep[top[y]])</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">        t.<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, cnt, <span class=\"number\">1</span>, id[top[y]], id[y], z);</span><br><span class=\"line\">        y = fa[top[y]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(deep[x] &gt; deep[y])</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">    t.<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, cnt, <span class=\"number\">1</span>, id[x], id[y], z);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (top[x] != top[y])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(deep[top[x]] &gt; deep[top[y]])</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">        ans += t.<span class=\"built_in\">query</span>(<span class=\"number\">1</span>, cnt, <span class=\"number\">1</span>, id[top[y]], id[y]);</span><br><span class=\"line\">        y = fa[top[y]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(deep[x] &gt; deep[y])</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">    ans += t.<span class=\"built_in\">query</span>(<span class=\"number\">1</span>, cnt, <span class=\"number\">1</span>, id[x], id[y]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;input.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;output.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k)) != EOF)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">init</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> u, v, w;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class=\"line\">            g[u].<span class=\"built_in\">push_back</span>(v);</span><br><span class=\"line\">            g[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">dfs1</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">dfs2</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        t.<span class=\"built_in\">build</span>(<span class=\"number\">1</span>, cnt, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">            t.<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, cnt, <span class=\"number\">1</span>, id[i], id[i], a[i]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= k; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> op[<span class=\"number\">10</span>];</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, op);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;I&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> x, y, z;</span><br><span class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class=\"line\">                <span class=\"built_in\">update</span>(x, y, z);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;D&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> x, y, z;</span><br><span class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class=\"line\">                <span class=\"built_in\">update</span>(x, y, -z);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> x;</span><br><span class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"built_in\">query</span>(x, x));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二分图\"><a href=\"#二分图\" class=\"headerlink\" title=\"二分图\"></a>二分图</h2><h3 id=\"HDU1045-Fire-Net\"><a href=\"#HDU1045-Fire-Net\" class=\"headerlink\" title=\"HDU1045-Fire Net\"></a>HDU1045-Fire Net</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">25</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; g[N];</span><br><span class=\"line\"><span class=\"type\">char</span> c[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> last[N], xid[<span class=\"number\">5</span>][<span class=\"number\">5</span>], yid[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">match</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : g[x]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!last[i] || <span class=\"built_in\">match</span>(last[i])) &#123;</span><br><span class=\"line\">            last[i] = x;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;input.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;output.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>((<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n)) &amp;&amp; (n != <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, c[i] + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n * n + n; i++) &#123;</span><br><span class=\"line\">            g[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(xid, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(xid));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(yid, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(yid));</span><br><span class=\"line\">        <span class=\"type\">int</span> cntx = <span class=\"number\">1</span>, cnty = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++, cntx++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(c[i][j] == <span class=\"string\">&#x27;.&#x27;</span>) &#123;</span><br><span class=\"line\">                    xid[i][j] = cntx;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    ++cntx;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++, cnty++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(c[i][j] == <span class=\"string\">&#x27;.&#x27;</span>) &#123;</span><br><span class=\"line\">                    yid[i][j] = cnty;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    ++cnty;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(c[i][j] != <span class=\"string\">&#x27;.&#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                g[xid[i][j]].<span class=\"built_in\">push_back</span>(yid[i][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(last, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(last));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= cntx; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(vis));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">match</span>(i)) ++ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"HDU1083-Courses-匈牙利模板题\"><a href=\"#HDU1083-Courses-匈牙利模板题\" class=\"headerlink\" title=\"HDU1083-Courses(匈牙利模板题)\"></a>HDU1083-Courses(匈牙利模板题)</h3><p>题意：n门课和m个学生，一门课可以有多个学生选，一个学生可以选多门课，问能否实现一门课一个课代表，一个学生只能当一门课的课代表</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">109</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> M = <span class=\"number\">309</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> T, n, m, last[M];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; g[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[M];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T num = <span class=\"number\">0</span>; <span class=\"type\">char</span> c; <span class=\"type\">bool</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((c=<span class=\"built_in\">getchar</span>())==<span class=\"string\">&#x27; &#x27;</span> || c==<span class=\"string\">&#x27;\\n&#x27;</span> || c==<span class=\"string\">&#x27;\\r&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;-&#x27;</span>) flag = <span class=\"number\">1</span>; <span class=\"keyword\">else</span> num = c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">isdigit</span>(c=<span class=\"built_in\">getchar</span>()))</span><br><span class=\"line\">            num = num * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag ? -num : num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">match</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : g[x]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!last[i] || <span class=\"built_in\">match</span>(last[i])) &#123;</span><br><span class=\"line\">            last[i] = x;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;input.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;output.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    T = <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">        n = <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">        m = <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> k = <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">            g[i].<span class=\"built_in\">resize</span>(k);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; k; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> x = <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">                g[i][j] = x;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(last, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(last));</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(vis));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">match</span>(i)) ++ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans == n) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;YES&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;NO&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-SAT\"><a href=\"#2-SAT\" class=\"headerlink\" title=\"2-SAT\"></a>2-SAT</h2><h2 id=\"染色\"><a href=\"#染色\" class=\"headerlink\" title=\"染色\"></a>染色</h2><h3 id=\"二值染色-HDU2444-The-Accomodation-of-Students\"><a href=\"#二值染色-HDU2444-The-Accomodation-of-Students\" class=\"headerlink\" title=\"二值染色 HDU2444-The Accomodation of Students\"></a>二值染色 HDU2444-The Accomodation of Students</h3><p>题意：n个学生，其中有m对相互认识，关系不可传递。两问：<br></p>\n<ol>\n<li>把所有人分成两组，每组中的人互不认识。若能实现，进行操作2，否则输出”NO”（染色）<br></li>\n<li>把互相认识两个人分到一个房间，问最多能分几个房间（二分图最大匹配）<br><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">209</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, last[N];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; g[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"type\">int</span> color[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : g[x]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(color[i] != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(color[x] == color[i]) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        color[i] = color[x] ^ <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"built_in\">dfs</span>(i)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">judge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        color[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(color[i] == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            color[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"built_in\">dfs</span>(i)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">match</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i : g[x]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        vis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!last[i] || <span class=\"built_in\">match</span>(last[i])) &#123;</span><br><span class=\"line\">            last[i] = x;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;input.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;output.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>((<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m)) != EOF) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            g[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> u, v;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class=\"line\">            g[u].<span class=\"built_in\">push_back</span>(v);</span><br><span class=\"line\">            g[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"built_in\">judge</span>()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(last, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(last));</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(vis));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">match</span>(i)) ++ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"网络流\"><a href=\"#网络流\" class=\"headerlink\" title=\"网络流\"></a>网络流</h2><h2 id=\"最小树形图-朱刘算法\"><a href=\"#最小树形图-朱刘算法\" class=\"headerlink\" title=\"最小树形图-朱刘算法\"></a>最小树形图-朱刘算法</h2><h2 id=\"k短路\"><a href=\"#k短路\" class=\"headerlink\" title=\"k短路\"></a>k短路</h2><h1 id=\"分治\"><a href=\"#分治\" class=\"headerlink\" title=\"分治\"></a>分治</h1><h2 id=\"三分\"><a href=\"#三分\" class=\"headerlink\" title=\"三分\"></a>三分</h2><h3 id=\"2021ICPC济南-D-Arithmetic-Sequence\"><a href=\"#2021ICPC济南-D-Arithmetic-Sequence\" class=\"headerlink\" title=\"2021ICPC济南-D Arithmetic Sequence\"></a>2021ICPC济南-D Arithmetic Sequence</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> __int128 Int;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">200009</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\">LL a[N], b[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    T num = <span class=\"number\">0</span>; <span class=\"type\">bool</span> flag = <span class=\"number\">0</span>; <span class=\"type\">char</span> c;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((c=<span class=\"built_in\">getchar</span>()) == <span class=\"string\">&#x27; &#x27;</span> || c == <span class=\"string\">&#x27;\\n&#x27;</span> || c == <span class=\"string\">&#x27;\\r&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;-&#x27;</span>) flag = <span class=\"number\">1</span>; <span class=\"keyword\">else</span> num = c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">isdigit</span>(c = <span class=\"built_in\">getchar</span>())) &#123;</span><br><span class=\"line\">        num = num * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag ? -num : num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(T num)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(num / <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(num % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Int <span class=\"title\">judge</span><span class=\"params\">(LL d)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        b[i] = a[i] - d * (i - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">nth_element</span>(b + <span class=\"number\">1</span>, b + n / <span class=\"number\">2</span> + <span class=\"number\">1</span>, b + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    Int tmp = b[n / <span class=\"number\">2</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">    Int ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        Int x = tmp - b[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            ans += x;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            ans -= x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;input.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;output.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        a[i] = <span class=\"built_in\">read</span>&lt;LL&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LL l = <span class=\"number\">-1e13</span>, r = <span class=\"number\">1e13</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l &lt; r) &#123;</span><br><span class=\"line\">        LL midl = l + (r - l) / <span class=\"number\">3</span>;</span><br><span class=\"line\">        LL midr = r - (r - l) / <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">judge</span>(midl) &lt;= <span class=\"built_in\">judge</span>(midr)) &#123;</span><br><span class=\"line\">            r = midr - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            l = midl + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">judge</span>(l));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"动态规划-DP\"><a href=\"#动态规划-DP\" class=\"headerlink\" title=\"动态规划(DP)\"></a>动态规划(DP)</h1><h2 id=\"树形DP\"><a href=\"#树形DP\" class=\"headerlink\" title=\"树形DP\"></a>树形DP</h2><h2 id=\"数位DP\"><a href=\"#数位DP\" class=\"headerlink\" title=\"数位DP\"></a>数位DP</h2><h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><h2 id=\"可持久化数据结构\"><a href=\"#可持久化数据结构\" class=\"headerlink\" title=\"可持久化数据结构\"></a>可持久化数据结构</h2><h3 id=\"主席树\"><a href=\"#主席树\" class=\"headerlink\" title=\"主席树\"></a>主席树</h3><p>求区间中小于等于k的数的个数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100009</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> T, n, m, a[N], b[N];</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HJT</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> left_tree l, mid</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> right_tree mid + 1, r</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(t, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(t));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> &amp;rt, <span class=\"type\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        t[++tot] = t[rt];</span><br><span class=\"line\">        rt = tot;</span><br><span class=\"line\">        ++t[rt].sum;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l&gt;=r)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mid&gt;=p)</span><br><span class=\"line\">            <span class=\"built_in\">update</span>(left_tree, t[rt].lc, p);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">update</span>(right_tree, t[rt].rc, p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> l_rt, <span class=\"type\">int</span> r_rt, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b[r] &lt;= v)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> t[r_rt].sum - t[l_rt].sum;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(b[l] &gt; v)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> x = b[mid];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b[mid] &gt;= v)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(left_tree, t[l_rt].lc, t[r_rt].lc, v);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> t[t[r_rt].lc].sum - t[t[l_rt].lc].sum + <span class=\"built_in\">query</span>(right_tree, t[l_rt].rc, t[r_rt].rc, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> sum, lc, rc;</span><br><span class=\"line\">    &#125; t[<span class=\"number\">8</span> * N];</span><br><span class=\"line\">    <span class=\"type\">int</span> tot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">HJT t;</span><br><span class=\"line\"><span class=\"type\">int</span> rt[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T num = <span class=\"number\">0</span>; <span class=\"type\">char</span> c; <span class=\"type\">bool</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((c=<span class=\"built_in\">getchar</span>())==<span class=\"string\">&#x27; &#x27;</span> || c==<span class=\"string\">&#x27;\\n&#x27;</span> || c==<span class=\"string\">&#x27;\\r&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;-&#x27;</span>) flag = <span class=\"number\">1</span>; <span class=\"keyword\">else</span> num = c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">isdigit</span>(c=<span class=\"built_in\">getchar</span>()))</span><br><span class=\"line\">        num = num * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag ? -num : num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    t.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    n = <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">    m = <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        b[i] = a[i] = <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(b + <span class=\"number\">1</span>, b + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> Size = <span class=\"built_in\">unique</span>(b + <span class=\"number\">1</span>, b + n + <span class=\"number\">1</span>) - b - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k = <span class=\"built_in\">lower_bound</span>(b + <span class=\"number\">1</span>, b + Size + <span class=\"number\">1</span>, a[i]) - b;</span><br><span class=\"line\">        rt[i] = rt[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        t.<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, Size, rt[i], k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l = <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> r = <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> x = <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> y = <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> sum1 = t.<span class=\"built_in\">query</span>(<span class=\"number\">1</span>, Size, rt[l - <span class=\"number\">1</span>], rt[r], x - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> sum2 = t.<span class=\"built_in\">query</span>(<span class=\"number\">1</span>, Size, rt[l - <span class=\"number\">1</span>], rt[r], y);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, sum2 - sum1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;input.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;output.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    T = <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= T; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d:\\n&quot;</span>, i);</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"可持久化Trie\"><a href=\"#可持久化Trie\" class=\"headerlink\" title=\"可持久化Trie\"></a>可持久化Trie</h3><h2 id=\"01Trie\"><a href=\"#01Trie\" class=\"headerlink\" title=\"01Trie\"></a>01Trie</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100009</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Trie</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(LL x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> root = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (LL i = <span class=\"number\">32</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> k = (x &gt;&gt; i) &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!ch[root][k]) ch[root][k] = ++cnt;</span><br><span class=\"line\">            root = ch[root][k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        num[root] = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">LL <span class=\"title\">ask</span><span class=\"params\">(LL x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> root = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (LL i = <span class=\"number\">32</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> k = (x &gt;&gt; i) &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ch[root][k ^ <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                root = ch[root][k ^ <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                root = ch[root][k];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num[root];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(ch, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(ch));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(num, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(num));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt;</span><br><span class=\"line\">    <span class=\"type\">int</span> ch[<span class=\"number\">32</span> * N][<span class=\"number\">2</span>];</span><br><span class=\"line\">    LL num[<span class=\"number\">32</span> * N];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Trie t;</span><br><span class=\"line\"><span class=\"type\">int</span> T, n, m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;input.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;output.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> Case = <span class=\"number\">1</span>; Case &lt;= T; Case++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d:\\n&quot;</span>, Case);</span><br><span class=\"line\">        t.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            LL x;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, &amp;x);</span><br><span class=\"line\">            t.<span class=\"built_in\">insert</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">            LL x;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, &amp;x);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, t.<span class=\"built_in\">ask</span>(x));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"莫队算法\"><a href=\"#莫队算法\" class=\"headerlink\" title=\"莫队算法\"></a>莫队算法</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100009</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Ask</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Ask</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Ask</span>(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r) : <span class=\"built_in\">l</span>(l), <span class=\"built_in\">r</span>(r) &#123;&#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> l, r, id;</span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"type\">const</span> Ask &amp;a) <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id &lt; a.id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; ask[N];</span><br><span class=\"line\"><span class=\"type\">int</span> block[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"type\">const</span> Ask &amp;a, <span class=\"type\">const</span> Ask &amp;b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(block[a.l] == block[b.l]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.r &lt; b.r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> block[a.l] &lt; block[b.l];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n, a[N], T, ans[N], m, sum;</span><br><span class=\"line\"><span class=\"type\">bool</span> flag[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        flag[a[x]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag[a[x] - <span class=\"number\">1</span>] &amp;&amp; flag[a[x] + <span class=\"number\">1</span>]) sum--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!flag[a[x] - <span class=\"number\">1</span>] &amp;&amp; !flag[a[x] + <span class=\"number\">1</span>]) sum++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        flag[a[x]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag[a[x] - <span class=\"number\">1</span>] &amp;&amp; flag[a[x] + <span class=\"number\">1</span>]) sum++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!flag[a[x] - <span class=\"number\">1</span>] &amp;&amp; !flag[a[x] + <span class=\"number\">1</span>]) sum--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">        sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">            flag[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">            ask[i].id = i;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;ask[i].l, &amp;ask[i].r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> size = <span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">            block[i] = (i - <span class=\"number\">1</span>) / size + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(ask + <span class=\"number\">1</span>, ask + m + <span class=\"number\">1</span>, cmp);</span><br><span class=\"line\">        <span class=\"type\">int</span> l = ask[<span class=\"number\">1</span>].l, r = ask[<span class=\"number\">1</span>].l - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">            ans[ask[i].id] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(r &lt; ask[i].r) &#123;</span><br><span class=\"line\">                ++r;</span><br><span class=\"line\">                <span class=\"built_in\">update</span>(r, <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(l &gt; ask[i].l) &#123;</span><br><span class=\"line\">                --l;</span><br><span class=\"line\">                <span class=\"built_in\">update</span>(l, <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(r &gt; ask[i].r) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">update</span>(r, <span class=\"number\">-1</span>);</span><br><span class=\"line\">                --r;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(l &lt; ask[i].l) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">update</span>(l, <span class=\"number\">-1</span>);</span><br><span class=\"line\">                ++l;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans[ask[i].id] = sum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["模板"]},{"title":"珂学上网","url":"/2022/03/31/%E7%8F%82%E5%AD%A6%E4%B8%8A%E7%BD%91/","content":"<p><img src=\"http://fwnhub.cn:8888/Chevereto/images/2022/03/31/wallhaven-wqve97.png\"><br>记录珂学上网的一些方法，主要是使用vps搭建珂学上网服务。</p>\n<span id=\"more\"></span>\n\n<p>环境：vultr购买vps，系统centos7。</p>\n<h1 id=\"Shadowsocks\"><a href=\"#Shadowsocks\" class=\"headerlink\" title=\"Shadowsocks\"></a>Shadowsocks</h1><p>首先安装shadowsocks所需工具，在终端中输入以下指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum update -y</span><br><span class=\"line\">yum install wget -y</span><br><span class=\"line\">yum install gcc -y</span><br><span class=\"line\">yum install make -y</span><br><span class=\"line\">yum install python36 -y</span><br></pre></td></tr></table></figure>\n<p>接下来下载shadowsocks</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br></pre></td></tr></table></figure>\n<p>配置安装shadowsocks</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod +x shadowsocks.sh</span><br><span class=\"line\">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure>\n<p>根据提示设置端口密码等。</p>\n<h1 id=\"v2ray\"><a href=\"#v2ray\" class=\"headerlink\" title=\"v2ray\"></a>v2ray</h1><p>直接傻瓜式安装，执行指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -s -L https://git.io/v2ray-setup.sh)</span><br></pre></td></tr></table></figure>\n<p>安装完成后显示v2ray信息</p>\n<h2 id=\"v2ray命令\"><a href=\"#v2ray命令\" class=\"headerlink\" title=\"v2ray命令\"></a>v2ray命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">v2ray config\t配置v2ray</span><br><span class=\"line\">v2ray start\t启动v2ray</span><br><span class=\"line\">v2ray stop\t停用v2ray</span><br></pre></td></tr></table></figure>","tags":["vps","翻墙","linux"]},{"title":"网络I/O","url":"/2022/04/27/%E7%BD%91%E7%BB%9CI-O/","content":"<p>学习网络I&#x2F;O模型</p>\n<span id=\"more\"></span>\n\n\n<h1 id=\"阻塞式I-x2F-O\"><a href=\"#阻塞式I-x2F-O\" class=\"headerlink\" title=\"阻塞式I&#x2F;O\"></a>阻塞式I&#x2F;O</h1><h1 id=\"非阻塞式I-x2F-O\"><a href=\"#非阻塞式I-x2F-O\" class=\"headerlink\" title=\"非阻塞式I&#x2F;O\"></a>非阻塞式I&#x2F;O</h1><h1 id=\"I-x2F-O多路复用\"><a href=\"#I-x2F-O多路复用\" class=\"headerlink\" title=\"I&#x2F;O多路复用\"></a>I&#x2F;O多路复用</h1><h1 id=\"信号驱动式I-x2F-O\"><a href=\"#信号驱动式I-x2F-O\" class=\"headerlink\" title=\"信号驱动式I&#x2F;O\"></a>信号驱动式I&#x2F;O</h1><h1 id=\"异步I-x2F-O\"><a href=\"#异步I-x2F-O\" class=\"headerlink\" title=\"异步I&#x2F;O\"></a>异步I&#x2F;O</h1>","categories":["CS-Notes"],"tags":["网络I/O"]},{"title":"网络原理","url":"/2022/04/01/%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/","content":"<p><img src=\"http://fwnhub.cn:8888/Chevereto/images/2022/04/04/wallhaven-zml7xv_1920x1080.png\"></p>\n<span id=\"more\"></span>\n<hr>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><h2 id=\"ISP\"><a href=\"#ISP\" class=\"headerlink\" title=\"ISP\"></a>ISP</h2><p>互联网服务提供者ISP，又称互联网服务提供商</p>\n<h2 id=\"电路交换\"><a href=\"#电路交换\" class=\"headerlink\" title=\"电路交换\"></a>电路交换</h2><p>建立连接、通话、释放连接</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>在通话的全部时间内，通话的两个用户始终占用端到端的通信资源</li>\n<li>线路传输效率低</li>\n</ul>\n<h2 id=\"分组交换\"><a href=\"#分组交换\" class=\"headerlink\" title=\"分组交换\"></a>分组交换</h2><p>存储转发</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>高效、灵活、迅速、可靠</p>\n<h2 id=\"计算机网络的性能指标\"><a href=\"#计算机网络的性能指标\" class=\"headerlink\" title=\"计算机网络的性能指标\"></a>计算机网络的性能指标</h2><ul>\n<li><strong>速率</strong>：数据的传输速率，bit&#x2F;s(bps)，也称为数据率</li>\n<li><strong>带宽</strong>：1、信号具有的频带宽度，单位赫兹；2、单位时间内网络中某信道所能通过的“最高数据率”，单位bit&#x2F;s</li>\n<li><strong>吞吐量</strong>：单位时间内通过某个网络的实际数据量</li>\n<li><strong>时延</strong>：数据从网络的一端传送到另一端所需的时间。也成为延迟或迟延</li>\n</ul>\n<h3 id=\"发送时延\"><a href=\"#发送时延\" class=\"headerlink\" title=\"发送时延\"></a>发送时延</h3><p>主机或路由器发送数据帧所需要的时间，也称传输时延<br>发送时延&#x3D;数据帧长度(bit)&#x2F;发送速率(bit&#x2F;s)</p>\n<h3 id=\"传播时延\"><a href=\"#传播时延\" class=\"headerlink\" title=\"传播时延\"></a>传播时延</h3><p>电磁波在信道中传播一定距离需要花费的时间<br>传播时延&#x3D;信道长度(m)&#x2F;电磁波在信道上的传播速率(m&#x2F;s)</p>\n<h3 id=\"处理时延\"><a href=\"#处理时延\" class=\"headerlink\" title=\"处理时延\"></a>处理时延</h3><p>主机或路由器在收到分组时需要花费一定时间进行处理</p>\n<h3 id=\"排队时延\"><a href=\"#排队时延\" class=\"headerlink\" title=\"排队时延\"></a>排队时延</h3><p>分组进入路由器后要先在输入队列中排队等待处理，路由器确定转发接口后，还要在输出队列中排队等待转发</p>\n<h2 id=\"计算机网络体系结构\"><a href=\"#计算机网络体系结构\" class=\"headerlink\" title=\"计算机网络体系结构\"></a>计算机网络体系结构</h2><ul>\n<li><strong>OSI</strong>：应用层、表示层、会话层、运输层、网络层、数据链路层、物理层</li>\n<li><strong>TCP&#x2F;IP</strong>：应用层、运输层、网际层IP、链路层</li>\n<li><strong>五层协议的体系结构</strong>：应用层、运输层、网络层、数据链路层、物理层</li>\n</ul>\n<hr>\n<h1 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h1><hr>\n<h1 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h1><p><strong>链路</strong>：从一个节点到相邻节点的物理线路<br><strong>数据链路</strong>：链路+通信协议</p>\n<h2 id=\"信道分类\"><a href=\"#信道分类\" class=\"headerlink\" title=\"信道分类\"></a>信道分类</h2><ul>\n<li>点对点信道</li>\n<li>广播信道</li>\n</ul>\n<h2 id=\"基本问题\"><a href=\"#基本问题\" class=\"headerlink\" title=\"基本问题\"></a>基本问题</h2><p>封装成帧、透明传输、差错检测</p>\n<h3 id=\"封装成帧\"><a href=\"#封装成帧\" class=\"headerlink\" title=\"封装成帧\"></a>封装成帧</h3><p>将网络层传下来的分组添加帧首部和尾部，构成一个帧</p>\n<h3 id=\"透明传输\"><a href=\"#透明传输\" class=\"headerlink\" title=\"透明传输\"></a>透明传输</h3><p>某一个实际存在的事物看起来好像不存在一样<br>无论什么样的比特组合的数据，都能按照原样没有差错地通过这个数据链路层</p>\n<h3 id=\"差错检测\"><a href=\"#差错检测\" class=\"headerlink\" title=\"差错检测\"></a>差错检测</h3><p>循环冗余检验CRC，检测比特差错</p>\n<h2 id=\"点对点协议PPP\"><a href=\"#点对点协议PPP\" class=\"headerlink\" title=\"点对点协议PPP\"></a>点对点协议PPP</h2><p>用户计算机和ISP进行通信时所使用地数据链路层协议</p>\n<h3 id=\"三个组成部分\"><a href=\"#三个组成部分\" class=\"headerlink\" title=\"三个组成部分\"></a>三个组成部分</h3><ul>\n<li>一个将IP数据报封装到串行链路地方法</li>\n<li>链路控制协议LCP</li>\n<li>网络控制协议NCP</li>\n</ul>\n<h3 id=\"PPP帧格式\"><a href=\"#PPP帧格式\" class=\"headerlink\" title=\"PPP帧格式\"></a>PPP帧格式</h3><p><img src=\"http://fwnhub.cn:8888/Chevereto/images/2022/04/06/20160204105742700.png\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">协议字段</th>\n<th align=\"left\">意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">0x0021</td>\n<td align=\"left\">IP数据报</td>\n</tr>\n<tr>\n<td align=\"left\">0xC021</td>\n<td align=\"left\">LCP的数据</td>\n</tr>\n<tr>\n<td align=\"left\">0x8021</td>\n<td align=\"left\">网络层控制数据</td>\n</tr>\n</tbody></table>\n<h3 id=\"PPP协议的工作状态\"><a href=\"#PPP协议的工作状态\" class=\"headerlink\" title=\"PPP协议的工作状态\"></a>PPP协议的工作状态</h3><p><img src=\"http://fwnhub.cn:8888/Chevereto/images/2022/04/06/20160204120152796.png\"></p>\n<h4 id=\"建立连接\"><a href=\"#建立连接\" class=\"headerlink\" title=\"建立连接\"></a>建立连接</h4><ul>\n<li>用户拨号接入ISP，建立物理连接</li>\n<li>用户个人电脑向ISP发送一系列LCP分组，建立LCP连接</li>\n<li>网络控制协议NCP给新接入的用户分配一个临时的IP地址</li>\n</ul>\n<h4 id=\"连接释放\"><a href=\"#连接释放\" class=\"headerlink\" title=\"连接释放\"></a>连接释放</h4><ul>\n<li>NCP释放网络层连接，收回IP地址</li>\n<li>LCP释放数据链路层连接</li>\n<li>最后释放物理层连接</li>\n</ul>\n<h2 id=\"共享媒体通信资源\"><a href=\"#共享媒体通信资源\" class=\"headerlink\" title=\"共享媒体通信资源\"></a>共享媒体通信资源</h2><h3 id=\"静态划分信道\"><a href=\"#静态划分信道\" class=\"headerlink\" title=\"静态划分信道\"></a>静态划分信道</h3><p>频分复用、时分复用、波分复用、码分复用</p>\n<h3 id=\"动态媒体接入控制\"><a href=\"#动态媒体接入控制\" class=\"headerlink\" title=\"动态媒体接入控制\"></a>动态媒体接入控制</h3><p>随机接入、受控接入</p>\n<h2 id=\"CSMA-x2F-CD协议\"><a href=\"#CSMA-x2F-CD协议\" class=\"headerlink\" title=\"CSMA&#x2F;CD协议\"></a>CSMA&#x2F;CD协议</h2><p>CSMA&#x2F;CD表示载波监听多点接入&#x2F;碰撞检测</p>\n<ul>\n<li><strong>多点接入</strong>：许多计算机以多点接入的方式连接在一根总线上</li>\n<li><strong>载波监听</strong>：边发送边监听。不管发送数据之前还是发送数据之中，每个站必须不停地检测信道</li>\n<li><strong>碰撞检测</strong>：边发送数据边检测信道上的信号电压的变化情况<br>单程端到端传播时延记为τ，发送数据的站点最多经过两倍端到端的传播时延(2τ)即可知道是否发生碰撞，2τ称为<strong>争用期</strong></li>\n</ul>\n<h3 id=\"截断二进制指数退避算法\"><a href=\"#截断二进制指数退避算法\" class=\"headerlink\" title=\"截断二进制指数退避算法\"></a>截断二进制指数退避算法</h3><ul>\n<li>基本退避时间为争用期2τ</li>\n<li>从离散的整数集合[0,1,…,(2<sup>k</sup>-1)]中随机一个数r，重传推后的时间为r倍的争用期。k&#x3D;Min[重传次数，10]</li>\n<li>重传16次仍不成功时，丢弃该帧，向高层报告</li>\n</ul>\n<h3 id=\"CSMA-x2F-CD要点\"><a href=\"#CSMA-x2F-CD要点\" class=\"headerlink\" title=\"CSMA&#x2F;CD要点\"></a>CSMA&#x2F;CD要点</h3><ol>\n<li><strong>准备发送</strong>：适配器从网络层获得一个分组，添加以太网帧的首部和尾部，组成以太网帧，放入适配器的缓存中。发送之前，先<strong>检测信道</strong></li>\n<li><strong>检测信道</strong>：若检测到信道正忙，则继续不停的检测，一直等待信道转为空闲，在96比特时间（帧间最小间隔）内信道保持空闲，就发送这个帧</li>\n<li><strong>边发送边监听</strong>：<ul>\n<li><strong>发送成功</strong>：争用期内未检测到碰撞。回到1</li>\n<li><strong>发送失败</strong>：争用期内检测到碰撞。立即停止发送，并按规定发送人为干扰信号。适配器执行指数退避算法，返回步骤2。</li>\n<li>重传16次不成功，停止重传并向高层报告</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h1 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h1><h2 id=\"静态路由和动态路由\"><a href=\"#静态路由和动态路由\" class=\"headerlink\" title=\"静态路由和动态路由\"></a>静态路由和动态路由</h2><ul>\n<li>静态路由时由系统管理员设计与构建的路由表规定的路由。适用于网关数量有限的场合，且网络拓扑结构不经常变化的网络。其缺点是不能动态地适应网络的变化，当网络状况变化后必须由网络管理员修改路由表</li>\n<li>动态路由是由路由选择协议而动态构建的，路由协议之间通过交换各自所拥有的路由信息实时跟新路由表的内容。动态路由可以自动学习网络的拓扑结构，并更新路由表。其缺点是路由广播信息将占据大量网络带宽</li>\n</ul>\n<hr>\n<h1 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h1><p><strong>两个协议</strong>：用户数据报协议UDP、传输控制协议TCP</p>\n<h2 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h2><ul>\n<li>UDP是无连接的</li>\n<li>尽最大努力交付</li>\n<li>面向报文</li>\n<li>无拥塞控制</li>\n<li>支持一对一，一对多，多对一和多对多通信</li>\n<li>首部开销小</li>\n</ul>\n<h2 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h2><ul>\n<li>面向连接</li>\n<li>点对点</li>\n<li>可靠交付</li>\n<li>全双工</li>\n<li>面向字节流</li>\n</ul>\n<h3 id=\"可靠传输工作原理\"><a href=\"#可靠传输工作原理\" class=\"headerlink\" title=\"可靠传输工作原理\"></a>可靠传输工作原理</h3><p><strong>停止等待协议</strong>：每发送完一个分组就停止发送，等待对方的确认，收到确认后发送下一个分组</p>\n<ul>\n<li>无差错</li>\n<li>出现差错接收方丢弃分组；超时重传，发送方等待确认，超时后重传分组</li>\n<li>确认丢失和确认迟到</li>\n</ul>\n<h4 id=\"连续ARQ协议\"><a href=\"#连续ARQ协议\" class=\"headerlink\" title=\"连续ARQ协议\"></a>连续ARQ协议</h4><p><strong>累积确认</strong>：对按序到达的最后一个分组发送确认</p>\n<h3 id=\"TCP报文首部格式\"><a href=\"#TCP报文首部格式\" class=\"headerlink\" title=\"TCP报文首部格式\"></a>TCP报文首部格式</h3><center>\n    <img style=\"border-radius: 0.3125em;\n    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);\" \n    src=\"http://fwnhub.cn:8888/Chevereto/images/2022/04/13/tcp.png\">\n    <br>\n    <div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">TCP报文格式</div>\n</center>\n\n<ul>\n<li><strong>确认号</strong>：期望收到对方下一个报文段的第一个数据字节的序号<ul>\n<li>紧急URG</li>\n<li><strong>确认ACK</strong></li>\n<li>推送PSH</li>\n<li>复位RST</li>\n<li><strong>同步SYN</strong></li>\n<li><strong>终止FIN</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"TCP流量控制\"><a href=\"#TCP流量控制\" class=\"headerlink\" title=\"TCP流量控制\"></a>TCP流量控制</h3><p>发送方窗口不能超过接收方给出的接收窗口的数值</p>\n<h3 id=\"TCP拥塞控制\"><a href=\"#TCP拥塞控制\" class=\"headerlink\" title=\"TCP拥塞控制\"></a>TCP拥塞控制</h3><ul>\n<li>慢开始</li>\n<li>拥塞避免</li>\n<li>快重传</li>\n<li>快恢复<br><img src=\"http://fwnhub.cn:8888/Chevereto/images/2022/04/16/20210824152616658.png\"></li>\n</ul>\n<h3 id=\"TCP连接建立\"><a href=\"#TCP连接建立\" class=\"headerlink\" title=\"TCP连接建立\"></a>TCP连接建立</h3><p>三次握手<br><img src=\"http://fwnhub.cn:8888/Chevereto/images/2022/04/16/23665552-d381503a7b82b402.png\"></p>\n<ul>\n<li>最初两端的TCP进程都处于CLOSED(关闭)状态，A主动打开连接，B被动打开</li>\n<li>B的TCP服务器进程先创建<strong>传输控制快</strong>TCB，准备接受客户进程的连接请求，然后服务器进程就处于LISTEN(收听)状态</li>\n<li><strong>一次握手</strong>：A的TCP客户进程也是首先创建传输控制块TCB，A向B发送连接请求报文段，同步位SYN&#x3D;1，同时选择一个初始序号seq&#x3D;x。SYN报文段不能携带数据，但要消耗掉一个序号，TCP客户进程进入SYN-SENT(同步已发送状态)</li>\n<li><strong>二次握手</strong>：B接受连接请求后，同意建立连接，向A发送确认，SYN和ACK位都置1，确认号ack&#x3D;x+1，选择一个初始序号seq&#x3D;y。TCP服务进程进入SYN-RCVD(同步收到)状态</li>\n<li><strong>三次握手</strong>：TCP客户进程收到B的确认后，向B发送确认，确认报文ACK置1，确认号ack&#x3D;y+1，自己的序号seq&#x3D;x+1。ACK报文段可以携带数据，不携带数据不消耗序号。TCP连接建立，A进入ESTABLISHED(已建立连接)状态</li>\n<li>B收到A的确认后，也进入ESTABLISHED状态</li>\n</ul>\n<h3 id=\"TCP连接释放\"><a href=\"#TCP连接释放\" class=\"headerlink\" title=\"TCP连接释放\"></a>TCP连接释放</h3><p>四次挥手<br><img src=\"http://fwnhub.cn:8888/Chevereto/images/2022/04/16/TCP.png\"></p>\n<ul>\n<li><strong>一次挥手</strong>：初始A和B处于ESTABLISHED状态。A向B发出连接释放报文，并停止发送数据，主动关闭TCP连接。A把连接释放报文首部的终止控制位FIN置1，序号seq&#x3D;u。A进入FIN-WAIT-1(终止等待1)状态。FIN不携带数据，消耗掉一个序号</li>\n<li><strong>二次挥手</strong>：B收到连接释放报文后即发出确认，确认号ack&#x3D;u+1，学号seq&#x3D;v。B进入CLOSE-WAIT(关闭等待)状态</li>\n<li>A收到B的确认后进入FIN-WAIT-2(终止等待2)状态。等待B发出的连接释放报文</li>\n<li><strong>三次挥手</strong>：B没有向A发送的数据，B向A发出连接释放报文，FIN&#x3D;1，假定序号seq&#x3D;w，重复发送过的确认号ack&#x3D;u+1。B进入LAST-ACK(最后确认)状态</li>\n<li><strong>四次挥手</strong>：A收到B的连接释放报文后，对此发出确认，确认报文段ACK置1，确认号ack&#x3D;w+1，序号seq&#x3D;u+1。A进入TIME-WAIT(时间等待)状态。等待2MSL时间进入CLOSE状态</li>\n</ul>\n<h3 id=\"TCP粘包、拆包问题\"><a href=\"#TCP粘包、拆包问题\" class=\"headerlink\" title=\"TCP粘包、拆包问题\"></a>TCP粘包、拆包问题</h3><h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><ul>\n<li><strong>拆包</strong><ol>\n<li>要发送的数据大于TCP发送缓冲区的大小，将会发生拆包</li>\n<li>要发送的数据大于最大报文段长度MSS</li>\n</ol>\n</li>\n<li><strong>粘包</strong><ol>\n<li>要发送的数据小于发送缓冲区的大小，TCP将多次写入缓冲区的数据一次发送出去将会发生粘包</li>\n<li>接收端的应用层没有及时的读取接受缓冲区的数据</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><ol>\n<li>发送端给每个数据包添加首部，首部中包含数据包的长度，这样接收端在收到数据后，通过读取首部长度字段便知道每个数据包的实际长度</li>\n<li>发送端将每个包封装为固定长度，不足的补0，接收端从接收缓冲区读取固定长度的数据</li>\n<li>在数据之间设置边界，如特殊符号，接收端通过边界拆分不同的数据包</li>\n</ol>\n<hr>\n<h1 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h1>","categories":["CS-Notes","网络原理"],"tags":["网络原理"]}]